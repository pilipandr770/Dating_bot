#!/usr/bin/env python
# —Ñ–∞–π–ª: admin_tools.py

import asyncio
import os
from dotenv import load_dotenv
from sqlalchemy import update
from app.database import get_session
from app.models.user import User
import sys

load_dotenv()

async def add_tokens_to_admin():
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ–∫–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    admin_id = os.getenv("ADMIN_IDS", "").split(",")[0]
    
    if not admin_id:
        print("‚ùå ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        return
    
    amount = 1000  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    
    print(f"üîÑ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ {amount} —Ç–æ–∫–µ–Ω–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å Telegram ID: {admin_id}")
    
    async for session in get_session():
        try:
            # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º Telegram ID
            user = await session.execute(
                f"SELECT * FROM dating_bot.users WHERE telegram_id = '{admin_id}'"
            )
            user_row = user.fetchone()
            
            if not user_row:
                print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID {admin_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                print("–°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                await session.execute(
                    f"INSERT INTO dating_bot.users (telegram_id, first_name, token_balance, is_admin) "
                    f"VALUES ('{admin_id}', 'Admin', {amount}, TRUE)"
                )
                await session.commit()
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å –±–∞–ª–∞–Ω—Å–æ–º {amount} —Ç–æ–∫–µ–Ω–æ–≤")
            else:
                # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_id = user_row.id
                current_balance = user_row.token_balance or 0
                new_balance = current_balance + amount
                
                await session.execute(
                    f"UPDATE dating_bot.users SET token_balance = {new_balance}, is_admin = TRUE "
                    f"WHERE telegram_id = '{admin_id}'"
                )
                await session.commit()
                print(f"‚úÖ –ë–∞–ª–∞–Ω—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω: {current_balance} ‚Üí {new_balance} —Ç–æ–∫–µ–Ω–æ–≤")
                
            return True
        except Exception as e:
            await session.rollback()
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤: {str(e)}")
            return False

async def view_admin_status():
    """
    –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç—É—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    """
    admin_id = os.getenv("ADMIN_IDS", "").split(",")[0]
    
    if not admin_id:
        print("‚ùå ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        return
    
    print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å Telegram ID: {admin_id}")
    
    async for session in get_session():
        try:
            # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º Telegram ID
            user = await session.execute(
                f"SELECT * FROM dating_bot.users WHERE telegram_id = '{admin_id}'"
            )
            user_row = user.fetchone()
            
            if not user_row:
                print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID {admin_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            else:
                # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                print("\nüìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:")
                print(f"ID: {user_row.id}")
                print(f"Telegram ID: {user_row.telegram_id}")
                print(f"–ò–º—è: {user_row.first_name}")
                print(f"–ë–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤: {user_row.token_balance or 0}")
                print(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {'–î–∞' if getattr(user_row, 'is_admin', False) else '–ù–µ—Ç'}")
                print(f"–Ø–∑—ã–∫: {user_row.language or '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
                print(f"–ü—Ä–µ–º–∏—É–º: {'–î–∞' if user_row.is_premium else '–ù–µ—Ç'}")
                print(f"–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω: {'–î–∞' if user_row.is_verified else '–ù–µ—Ç'}")
                print("\n")
                
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {str(e)}")
            return False

async def main():
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python admin_tools.py [add_tokens|status]")
        return
    
    command = sys.argv[1]
    
    if command == "add_tokens":
        await add_tokens_to_admin()
    elif command == "status":
        await view_admin_status()
    else:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")
        print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: add_tokens, status")

if __name__ == "__main__":
    asyncio.run(main())
