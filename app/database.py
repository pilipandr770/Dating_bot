# —Ñ–∞–π–ª: app/database.py

import os
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.ext.asyncio import async_sessionmaker
from sqlalchemy import text
from dotenv import load_dotenv
import asyncio

load_dotenv()

POSTGRES_URL = os.getenv("POSTGRES_URL")
DB_SCHEMA = os.getenv("DB_SCHEMA")

engine = create_async_engine(POSTGRES_URL, echo=False, future=True)
SessionLocal = async_sessionmaker(bind=engine, class_=AsyncSession, expire_on_commit=False)


async def init_db():
    """
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ç–∞–±–ª–∏—Ü—å —É —Å—Ö–µ–º—ñ —Ç–∞ —Å—Ç–≤–æ—Ä—é—î —ó—Ö —ñ–∑ schema.sql –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É –∑–∞–ø—É—Å–∫—É.
    """
    async with engine.begin() as conn:
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Å—Ö–µ–º—É, —è–∫—â–æ —ó—ó —â–µ –Ω–µ–º–∞
        await conn.execute(text(f"CREATE SCHEMA IF NOT EXISTS {DB_SCHEMA}"))

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ç–∞–±–ª–∏—Ü—ñ –≤–∂–µ —î
        result = await conn.execute(
            text(f"SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = :schema"),
            {"schema": DB_SCHEMA}
        )
        tables_count = result.scalar()

        # –Ø–∫—â–æ —Ç–∞–±–ª–∏—Ü—å –Ω–µ–º–∞, –≤–∏–∫–æ–Ω—É—î–º–æ schema.sql
        if tables_count == 0:
            print("üì¶ –¢–∞–±–ª–∏—Ü—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ ‚Äî —Å—Ç–≤–æ—Ä—é—î–º–æ –∑ schema.sql...")
            with open("schema.sql", "r", encoding="utf-8") as f:
                sql = f.read()
            await conn.execute(text(sql))
            print("‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –≤—Å—ñ —Ç–∞–±–ª–∏—Ü—ñ.")
        else:
            print("‚úÖ –¢–∞–±–ª–∏—Ü—ñ –≤–∂–µ —ñ—Å–Ω—É—é—Ç—å.")


# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–µ—Å—ñ–π
async def get_session():
    async with SessionLocal() as session:
        yield session


# –õ–æ–∫–∞–ª—å–Ω–∏–π –∑–∞–ø—É—Å–∫ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
if __name__ == "__main__":
    asyncio.run(init_db())
