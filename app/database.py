# —Ñ–∞–π–ª: app/database.py

import os
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.ext.asyncio import async_sessionmaker
from sqlalchemy import text
from dotenv import load_dotenv
import asyncio

load_dotenv()

POSTGRES_URL = os.getenv("POSTGRES_URL")
DB_SCHEMA = os.getenv("DB_SCHEMA")

engine = create_async_engine(POSTGRES_URL, echo=False, future=True)
SessionLocal = async_sessionmaker(bind=engine, class_=AsyncSession, expire_on_commit=False)


async def init_db():
    """
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ç–∞–±–ª–∏—Ü—å —É —Å—Ö–µ–º—ñ —Ç–∞ —Å—Ç–≤–æ—Ä—é—î —ó—Ö —ñ–∑ schema.sql –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É –∑–∞–ø—É—Å–∫—É.
    """
    async with engine.begin() as conn:
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Å—Ö–µ–º—É, —è–∫—â–æ —ó—ó —â–µ –Ω–µ–º–∞
        await conn.execute(text(f"CREATE SCHEMA IF NOT EXISTS {DB_SCHEMA}"))

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ç–∞–±–ª–∏—Ü—ñ –≤–∂–µ —î
        result = await conn.execute(
            text(f"SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = :schema"),
            {"schema": DB_SCHEMA}
        )
        tables_count = result.scalar()

        # –Ø–∫—â–æ —Ç–∞–±–ª–∏—Ü—å –Ω–µ–º–∞, –≤–∏–∫–æ–Ω—É—î–º–æ schema.sql
        if tables_count == 0:
            print("üì¶ –¢–∞–±–ª–∏—Ü—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ ‚Äî —Å—Ç–≤–æ—Ä—é—î–º–æ –∑ schema.sql...")
            # –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ —à–ª—è—Ö –¥–æ schema.sql, —â–æ–± –ø—Ä–∞—Ü—é–≤–∞–ª–æ –∑ –±—É–¥—å-—è–∫–æ–≥–æ –º—ñ—Å—Ü—è
            import os
            base_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
            schema_path = os.path.join(base_dir, "schema.sql")
            with open(schema_path, "r", encoding="utf-8") as f:
                # –†–æ–∑–¥—ñ–ª—è—î–º–æ SQL –Ω–∞ –æ–∫—Ä–µ–º—ñ –∫–æ–º–∞–Ω–¥–∏
                sql_commands = f.read().split(';')
                # –í–∏–∫–æ–Ω—É—î–º–æ –∫–æ–∂–Ω—É –∫–æ–º–∞–Ω–¥—É –æ–∫—Ä–µ–º–æ
                for command in sql_commands:
                    # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ –∫–æ–º–∞–Ω–¥–∏
                    if command.strip():
                        try:
                            await conn.execute(text(command.strip()))
                        except Exception as e:
                            print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ –∫–æ–º–∞–Ω–¥–∏: {e}")
            print("‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –≤—Å—ñ —Ç–∞–±–ª–∏—Ü—ñ.")
        else:
            print("‚úÖ –¢–∞–±–ª–∏—Ü—ñ –≤–∂–µ —ñ—Å–Ω—É—é—Ç—å.")
            
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∫–æ–ª–æ–Ω–∫–∏ language —É —Ç–∞–±–ª–∏—Ü—ñ users
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∫–æ–ª–æ–Ω–∫–∞ language
            result = await conn.execute(
                text(f"SELECT column_name FROM information_schema.columns WHERE table_schema = :schema AND table_name = 'users' AND column_name = 'language'"),
                {"schema": DB_SCHEMA}
            )
            column_exists = result.scalar() is not None
            
            # –Ø–∫—â–æ –∫–æ–ª–æ–Ω–∫–∏ –Ω–µ–º–∞—î - –¥–æ–¥–∞—î–º–æ —ó—ó
            if not column_exists:
                print("üì¶ –î–æ–¥–∞—î–º–æ –∫–æ–ª–æ–Ω–∫—É language –¥–æ —Ç–∞–±–ª–∏—Ü—ñ users...")
                await conn.execute(text(f"ALTER TABLE {DB_SCHEMA}.users ADD COLUMN language TEXT"))
                print("‚úÖ –ö–æ–ª–æ–Ω–∫—É language –¥–æ–¥–∞–Ω–æ.")
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –∫–æ–ª–æ–Ω–∫–∏ language: {e}")


# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–µ—Å—ñ–π
async def get_session():
    async with SessionLocal() as session:
        yield session


# –õ–æ–∫–∞–ª—å–Ω–∏–π –∑–∞–ø—É—Å–∫ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
if __name__ == "__main__":
    asyncio.run(init_db())
