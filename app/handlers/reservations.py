# —Ñ–∞–π–ª: app/handlers/reservations.py

from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from app.services.user_service import get_user_language
from app.keyboards.main_menu import get_main_menu
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from app.database import get_session
from sqlalchemy import select
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º–∏
class ReservationStates(StatesGroup):
    waiting_for_city = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞
    waiting_for_place_type = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –º–µ—Å—Ç–∞
    waiting_for_date = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã
    waiting_for_time = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏
    waiting_for_confirmation = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reservation –∏–ª–∏ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"
async def cmd_reservation(message: types.Message):
    telegram_id = str(message.from_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    lang = await get_user_language(telegram_id)
    
    # –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    texts = {
        "ua": "üìÖ *–ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –º—ñ—Å—Ü—è –¥–ª—è –∑—É—Å—Ç—Ä—ñ—á—ñ*\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
        "ru": "üìÖ *–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞ –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        "en": "üìÖ *Book a place for a date*\n\nChoose an action:",
        "de": "üìÖ *Einen Platz f√ºr ein Date buchen*\n\nW√§hlen Sie eine Aktion:"
    }
    
    # –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    button_texts = {
        "ua": {"new": "üîç –ó–Ω–∞–π—Ç–∏ –º—ñ—Å—Ü–µ", "my": "üìã –ú–æ—ó –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è", "back": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"},
        "ru": {"new": "üîç –ù–∞–π—Ç–∏ –º–µ—Å—Ç–æ", "my": "üìã –ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", "back": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"},
        "en": {"new": "üîç Find a place", "my": "üìã My reservations", "back": "‚¨ÖÔ∏è Back"},
        "de": {"new": "üîç Einen Platz finden", "my": "üìã Meine Buchungen", "back": "‚¨ÖÔ∏è Zur√ºck"}
    }
    
    t = button_texts.get(lang, button_texts["en"])
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    markup = InlineKeyboardMarkup(row_width=2)
    markup.add(
        InlineKeyboardButton(t["new"], callback_data="reservation_new"),
        InlineKeyboardButton(t["my"], callback_data="reservation_my")
    )
    markup.add(InlineKeyboardButton(t["back"], callback_data="reservation_back"))
    
    await message.answer(texts.get(lang, texts["en"]), reply_markup=markup, parse_mode="Markdown")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
async def on_reservation_new(callback_query: types.CallbackQuery, state: FSMContext):
    telegram_id = str(callback_query.from_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    lang = await get_user_language(telegram_id)
    
    # –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    texts = {
        "ua": "üåÜ –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞, –¥–µ –≤–∏ –±–∞–∂–∞—î—Ç–µ –∑–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ –º—ñ—Å—Ü–µ:",
        "ru": "üåÜ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –≥–¥–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –º–µ—Å—Ç–æ:",
        "en": "üåÜ Enter the name of the city where you want to book a place:",
        "de": "üåÜ Geben Sie den Namen der Stadt ein, in der Sie einen Platz buchen m√∂chten:"
    }
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞
    await ReservationStates.waiting_for_city.set()
    
    await callback_query.message.edit_text(texts.get(lang, texts["en"]))
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ–∫—É—â–∏—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
async def on_reservation_my(callback_query: types.CallbackQuery):
    telegram_id = str(callback_query.from_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    lang = await get_user_language(telegram_id)
    
    # –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    texts = {
        "ua": "üìã *–í–∞—à—ñ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è:*\n\n–£ –≤–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î –±—Ä–æ–Ω—é–≤–∞–Ω—å.",
        "ru": "üìã *–í–∞—à–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:*\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.",
        "en": "üìã *Your reservations:*\n\nYou don't have any reservations yet.",
        "de": "üìã *Ihre Buchungen:*\n\nSie haben noch keine Buchungen."
    }
    
    # –ó–¥–µ—Å—å –±—É–¥–µ–º –∑–∞–≥—Ä—É–∂–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    reservations = []
    
    if not reservations:
        # –ï—Å–ª–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –Ω–µ—Ç
        message = texts.get(lang, texts["en"])
    else:
        # –ï—Å–ª–∏ –µ—Å—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è, —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        pass
    
    # –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    button_texts = {
        "ua": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        "ru": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        "en": "‚¨ÖÔ∏è Back",
        "de": "‚¨ÖÔ∏è Zur√ºck"
    }
    
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton(button_texts.get(lang, button_texts["en"]), callback_data="reservation_back_to_menu"))
    
    await callback_query.message.edit_text(message, reply_markup=markup, parse_mode="Markdown")
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
async def on_reservation_back(callback_query: types.CallbackQuery):
    telegram_id = str(callback_query.from_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    lang = await get_user_language(telegram_id)
    
    # –ü—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –æ—Å—Ç–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ –º–µ–Ω—é
    await callback_query.message.delete()
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
async def on_reservation_back_to_menu(callback_query: types.CallbackQuery):
    # –ü—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    await cmd_reservation(callback_query.message)
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞
async def process_city(message: types.Message, state: FSMContext):
    telegram_id = str(message.from_user.id)
    city = message.text.strip()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ä–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(city=city)
    
    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    lang = await get_user_language(telegram_id)
    
    # –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    texts = {
        "ua": f"üèô –û–±—Ä–∞–Ω–æ –º—ñ—Å—Ç–æ: *{city}*\n\n–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∑–∞–∫–ª–∞–¥—É:",
        "ru": f"üèô –í—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥: *{city}*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–≤–µ–¥–µ–Ω–∏—è:",
        "en": f"üèô Selected city: *{city}*\n\nChoose the type of place:",
        "de": f"üèô Ausgew√§hlte Stadt: *{city}*\n\nW√§hlen Sie die Art des Ortes:"
    }
    
    # –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —Ç–∏–ø–æ–≤ –∑–∞–≤–µ–¥–µ–Ω–∏–π
    button_texts = {
        "ua": {
            "restaurant": "üçΩ –†–µ—Å—Ç–æ—Ä–∞–Ω",
            "cafe": "‚òïÔ∏è –ö–∞—Ñ–µ",
            "bar": "üç∏ –ë–∞—Ä",
            "park": "üå≥ –ü–∞—Ä–∫",
            "cinema": "üé¨ –ö—ñ–Ω–æ—Ç–µ–∞—Ç—Ä",
            "other": "üè¢ –Ü–Ω—à–µ",
            "back": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
        },
        "ru": {
            "restaurant": "üçΩ –†–µ—Å—Ç–æ—Ä–∞–Ω",
            "cafe": "‚òïÔ∏è –ö–∞—Ñ–µ",
            "bar": "üç∏ –ë–∞—Ä",
            "park": "üå≥ –ü–∞—Ä–∫",
            "cinema": "üé¨ –ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä",
            "other": "üè¢ –î—Ä—É–≥–æ–µ",
            "back": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
        },
        "en": {
            "restaurant": "üçΩ Restaurant",
            "cafe": "‚òïÔ∏è Cafe",
            "bar": "üç∏ Bar",
            "park": "üå≥ Park",
            "cinema": "üé¨ Cinema",
            "other": "üè¢ Other",
            "back": "‚¨ÖÔ∏è Back"
        },
        "de": {
            "restaurant": "üçΩ Restaurant",
            "cafe": "‚òïÔ∏è Caf√©",
            "bar": "üç∏ Bar",
            "park": "üå≥ Park",
            "cinema": "üé¨ Kino",
            "other": "üè¢ Andere",
            "back": "‚¨ÖÔ∏è Zur√ºck"
        }
    }
    
    t = button_texts.get(lang, button_texts["en"])
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–∏–ø–∞–º–∏ –∑–∞–≤–µ–¥–µ–Ω–∏–π
    markup = InlineKeyboardMarkup(row_width=2)
    markup.add(
        InlineKeyboardButton(t["restaurant"], callback_data="place_type_restaurant"),
        InlineKeyboardButton(t["cafe"], callback_data="place_type_cafe")
    )
    markup.add(
        InlineKeyboardButton(t["bar"], callback_data="place_type_bar"),
        InlineKeyboardButton(t["park"], callback_data="place_type_park")
    )
    markup.add(
        InlineKeyboardButton(t["cinema"], callback_data="place_type_cinema"),
        InlineKeyboardButton(t["other"], callback_data="place_type_other")
    )
    markup.add(InlineKeyboardButton(t["back"], callback_data="reservation_back_to_menu"))
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –º–µ—Å—Ç–∞
    await ReservationStates.waiting_for_place_type.set()
    
    await message.answer(texts.get(lang, texts["en"]), reply_markup=markup, parse_mode="Markdown")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def register_reservation_handlers(dp: Dispatcher):
    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    dp.register_message_handler(
        cmd_reservation, 
        lambda m: any(word in m.text for word in ["–ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è", "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", "Reservation", "Buchung"]),
        state="*"
    )
    dp.register_message_handler(cmd_reservation, commands="reservation", state="*")
    
    # –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    dp.register_callback_query_handler(on_reservation_new, lambda c: c.data == "reservation_new", state="*")
    dp.register_callback_query_handler(on_reservation_my, lambda c: c.data == "reservation_my", state="*")
    dp.register_callback_query_handler(on_reservation_back, lambda c: c.data == "reservation_back", state="*")
    dp.register_callback_query_handler(on_reservation_back_to_menu, lambda c: c.data == "reservation_back_to_menu", state="*")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    dp.register_message_handler(process_city, state=ReservationStates.waiting_for_city)
