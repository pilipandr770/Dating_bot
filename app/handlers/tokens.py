# —Ñ–∞–π–ª: app/handlers/tokens.py

from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from app.services.token_service import get_user_balance, update_user_balance, transfer_tokens, request_withdrawal
from app.services.user_service import get_user_by_telegram_id, get_user_language
from app.keyboards.main_menu import get_main_menu
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Ç–æ–∫–µ–Ω–∞–º–∏
class TokenStates(StatesGroup):
    waiting_for_transfer_amount = State()  # –í–≤–æ–¥ —Å—É–º–º—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
    waiting_for_receiver_id = State()      # –í–≤–æ–¥ ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    waiting_for_withdrawal_amount = State() # –í–≤–æ–¥ —Å—É–º–º—ã –¥–ª—è –≤—ã–≤–æ–¥–∞

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /balance - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
async def cmd_balance(message: types.Message):
    telegram_id = str(message.from_user.id)
    balance = await get_user_balance(telegram_id)
    
    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    lang = await get_user_language(telegram_id)
    
    # –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    texts = {
        "ua": f"üí∞ –í–∞—à –ø–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å: {balance} —Ç–æ–∫–µ–Ω—ñ–≤",
        "ru": f"üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance} —Ç–æ–∫–µ–Ω–æ–≤",
        "en": f"üí∞ Your current balance: {balance} tokens",
        "de": f"üí∞ Ihr aktuelles Guthaben: {balance} Token"
    }
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Ç–æ–∫–µ–Ω–∞–º–∏
    markup = InlineKeyboardMarkup(row_width=2)
    
    # –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    button_texts = {
        "ua": {"add": "‚ûï –ü–æ–ø–æ–≤–Ω–∏—Ç–∏", "transfer": "üîÑ –ü–µ—Ä–µ–∫–∞–∑–∞—Ç–∏", "withdraw": "üí∏ –í–∏–≤–µ—Å—Ç–∏"},
        "ru": {"add": "‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å", "transfer": "üîÑ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏", "withdraw": "üí∏ –í—ã–≤–µ—Å—Ç–∏"},
        "en": {"add": "‚ûï Add tokens", "transfer": "üîÑ Transfer", "withdraw": "üí∏ Withdraw"},
        "de": {"add": "‚ûï Aufladen", "transfer": "üîÑ √úberweisen", "withdraw": "üí∏ Abheben"}
    }
    
    t = button_texts.get(lang, button_texts["en"])
    
    markup.add(
        InlineKeyboardButton(t["add"], callback_data="token_add"),
        InlineKeyboardButton(t["transfer"], callback_data="token_transfer")
    )
    markup.add(InlineKeyboardButton(t["withdraw"], callback_data="token_withdraw"))
    
    await message.answer(texts.get(lang, texts["en"]), reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
async def on_token_add(callback_query: types.CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    lang = await get_user_language(str(callback_query.from_user.id))
    
    # –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    texts = {
        "ua": "–û–±–µ—Ä—ñ—Ç—å –ø–∞–∫–µ—Ç —Ç–æ–∫–µ–Ω—ñ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏:",
        "ru": "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏:",
        "en": "Choose a token package to purchase:",
        "de": "W√§hlen Sie ein Token-Paket zum Kauf:"
    }
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–∞–∫–µ—Ç–∞–º–∏ —Ç–æ–∫–µ–Ω–æ–≤
    markup = InlineKeyboardMarkup(row_width=2)
    
    # –ü–∞–∫–µ—Ç—ã —Ç–æ–∫–µ–Ω–æ–≤: –Ω–∞–∑–≤–∞–Ω–∏–µ, —Ü–µ–Ω–∞ –≤ EUR, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
    token_packages = [
        {"name": "100 tokens", "price": 10, "tokens": 100},
        {"name": "200 tokens", "price": 18, "tokens": 200},
        {"name": "500 tokens", "price": 40, "tokens": 500},
        {"name": "1000 tokens", "price": 75, "tokens": 1000}
    ]
    
    for package in token_packages:
        button_text = f"{package['name']} - {package['price']}‚Ç¨"
        markup.add(InlineKeyboardButton(button_text, callback_data=f"buy_tokens_{package['tokens']}"))
    
    # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
    cancel_texts = {
        "ua": "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏",
        "ru": "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
        "en": "‚ùå Cancel",
        "de": "‚ùå Abbrechen"
    }
    markup.add(InlineKeyboardButton(cancel_texts.get(lang, cancel_texts["en"]), callback_data="cancel_token_operation"))
    
    await callback_query.message.edit_text(texts.get(lang, texts["en"]), reply_markup=markup)
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤
async def on_buy_tokens(callback_query: types.CallbackQuery):
    token_amount = int(callback_query.data.split('_')[2])
    telegram_id = str(callback_query.from_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    lang = await get_user_language(telegram_id)
    
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã Stripe
    from app.services.stripe import create_checkout_session
    from app.database import get_session
    
    user = await get_user_by_telegram_id(telegram_id)
    
    if not user:
        return await callback_query.answer("‚ùå User not found", show_alert=True)
    
    async for session in get_session():
        try:
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –æ–ø–ª–∞—Ç—ã Stripe –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤
            checkout_url = await create_checkout_session(user.id, "tokens", session)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
            # –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            texts = {
                "ua": f"–î–ª—è –ø–æ–∫—É–ø–∫–∏ {token_amount} —Ç–æ–∫–µ–Ω—ñ–≤ –ø–µ—Ä–µ–π–¥—ñ—Ç—å –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º:",
                "ru": f"–î–ª—è –ø–æ–∫—É–ø–∫–∏ {token_amount} —Ç–æ–∫–µ–Ω–æ–≤ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:",
                "en": f"To purchase {token_amount} tokens, follow the link:",
                "de": f"Um {token_amount} Token zu kaufen, folgen Sie dem Link:"
            }
            
            markup = InlineKeyboardMarkup()
            
            button_texts = {
                "ua": "üí≥ –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –æ–ø–ª–∞—Ç–∏",
                "ru": "üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ",
                "en": "üí≥ Go to payment",
                "de": "üí≥ Zur Zahlung gehen"
            }
            
            markup.add(InlineKeyboardButton(
                button_texts.get(lang, button_texts["en"]), 
                url=checkout_url
            ))
            
            await callback_query.message.edit_text(
                texts.get(lang, texts["en"]),
                reply_markup=markup
            )
            await callback_query.answer()
        
        except Exception as e:
            error_texts = {
                "ua": "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –ø–ª–∞—Ç–µ–∂—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
                "ru": "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                "en": "‚ùå Error creating payment. Please try again later.",
                "de": "‚ùå Fehler beim Erstellen der Zahlung. Bitte versuchen Sie es sp√§ter erneut."
            }
            await callback_query.message.edit_text(error_texts.get(lang, error_texts["en"]))
            await callback_query.answer()
            print(f"Payment creation error: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω–æ–≤
async def on_token_transfer(callback_query: types.CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    lang = await get_user_language(str(callback_query.from_user.id))
    
    # –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    texts = {
        "ua": "–í–≤–µ–¥—ñ—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–æ–º—É —Ö–æ—á–µ—Ç–µ –ø–µ—Ä–µ–∫–∞–∑–∞—Ç–∏ —Ç–æ–∫–µ–Ω–∏:\n(–¶–µ —á–∏—Å–ª–æ –≤ —ó—Ö –ø—Ä–æ—Ñ—ñ–ª—ñ)",
        "ru": "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–æ–∫–µ–Ω—ã:\n(–≠—Ç–æ —á–∏—Å–ª–æ –≤ –∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ)",
        "en": "Enter the user ID to transfer tokens to:\n(This is the number in their profile)",
        "de": "Geben Sie die Benutzer-ID ein, an die Sie Token √ºberweisen m√∂chten:\n(Dies ist die Nummer in ihrem Profil)"
    }
    
    await callback_query.message.edit_text(texts.get(lang, texts["en"]))
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    await TokenStates.waiting_for_receiver_id.set()
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è —Ç–æ–∫–µ–Ω–æ–≤
async def process_receiver_id(message: types.Message, state: FSMContext):
    try:
        receiver_id = message.text.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è - —á–∏—Å–ª–æ
        if not receiver_id.isdigit():
            raise ValueError("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(receiver_id=receiver_id)
        
        # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        lang = await get_user_language(str(message.from_user.id))
        
        # –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        texts = {
            "ua": "–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–∫–µ–Ω—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–∫–∞–∑—É:",
            "ru": "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:",
            "en": "Enter the number of tokens to transfer:",
            "de": "Geben Sie die Anzahl der zu √ºberweisenden Token ein:"
        }
        
        await message.answer(texts.get(lang, texts["en"]))
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å—É–º–º—ã –ø–µ—Ä–µ–≤–æ–¥–∞
        await TokenStates.waiting_for_transfer_amount.set()
    except Exception as e:
        # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        lang = await get_user_language(str(message.from_user.id))
        
        # –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        error_texts = {
            "ua": "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ID. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
            "ru": "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            "en": "‚ùå Invalid ID format. Please try again.",
            "de": "‚ùå Ung√ºltiges ID-Format. Bitte versuchen Sie es erneut."
        }
        
        await message.answer(error_texts.get(lang, error_texts["en"]))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—É–º–º—ã –ø–µ—Ä–µ–≤–æ–¥–∞
async def process_transfer_amount(message: types.Message, state: FSMContext):
    try:
        amount = int(message.text.strip())
        
        if amount <= 0:
            raise ValueError("Amount must be positive")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        receiver_id = data.get("receiver_id")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥ —Ç–æ–∫–µ–Ω–æ–≤
        sender_id = str(message.from_user.id)
        success = await transfer_tokens(sender_id, receiver_id, amount)
        
        # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        lang = await get_user_language(sender_id)
        
        if success:
            # –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ
            success_texts = {
                "ua": f"‚úÖ –í–∏ —É—Å–ø—ñ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–ª–∏ {amount} —Ç–æ–∫–µ–Ω—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –∑ ID {receiver_id}.",
                "ru": f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–ª–∏ {amount} —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {receiver_id}.",
                "en": f"‚úÖ You have successfully transferred {amount} tokens to user with ID {receiver_id}.",
                "de": f"‚úÖ Sie haben erfolgreich {amount} Token an den Benutzer mit der ID {receiver_id} √ºberwiesen."
            }
            
            await message.answer(success_texts.get(lang, success_texts["en"]), reply_markup=get_main_menu(lang))
        else:
            # –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
            error_texts = {
                "ua": "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∫–æ–Ω–∞—Ç–∏ –ø–µ—Ä–µ–∫–∞–∑. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –±–∞–ª–∞–Ω—Å —Ç–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å ID –æ—Ç—Ä–∏–º—É–≤–∞—á–∞.",
                "ru": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è.",
                "en": "‚ùå Transfer failed. Check your balance and the recipient's ID.",
                "de": "‚ùå √úberweisung fehlgeschlagen. √úberpr√ºfen Sie Ihr Guthaben und die ID des Empf√§ngers."
            }
            
            await message.answer(error_texts.get(lang, error_texts["en"]), reply_markup=get_main_menu(lang))
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.finish()
    except ValueError:
        # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        lang = await get_user_language(str(message.from_user.id))
        
        # –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        error_texts = {
            "ua": "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–∏. –í–≤–µ–¥—ñ—Ç—å —Ü—ñ–ª–µ —á–∏—Å–ª–æ –±—ñ–ª—å—à–µ 0.",
            "ru": "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0.",
            "en": "‚ùå Invalid amount format. Enter an integer greater than 0.",
            "de": "‚ùå Ung√ºltiges Summenformat. Geben Sie eine ganze Zahl gr√∂√üer als 0 ein."
        }
        
        await message.answer(error_texts.get(lang, error_texts["en"]))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω–æ–≤
async def on_token_withdraw(callback_query: types.CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    lang = await get_user_language(str(callback_query.from_user.id))
    
    # –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    texts = {
        "ua": "–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–∫–µ–Ω—ñ–≤ –¥–ª—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è:",
        "ru": "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞:",
        "en": "Enter the number of tokens to withdraw:",
        "de": "Geben Sie die Anzahl der Token ein, die Sie abheben m√∂chten:"
    }
    
    await callback_query.message.edit_text(texts.get(lang, texts["en"]))
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å—É–º–º—ã –≤—ã–≤–æ–¥–∞
    await TokenStates.waiting_for_withdrawal_amount.set()
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—É–º–º—ã –≤—ã–≤–æ–¥–∞
async def process_withdrawal_amount(message: types.Message, state: FSMContext):
    try:
        amount = int(message.text.strip())
        
        if amount <= 0:
            raise ValueError("Amount must be positive")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Ç–æ–∫–µ–Ω–æ–≤
        telegram_id = str(message.from_user.id)
        success = await request_withdrawal(telegram_id, amount)
        
        # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        lang = await get_user_language(telegram_id)
        
        if success:
            # –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ
            success_texts = {
                "ua": f"‚úÖ –í–∞—à –∑–∞–ø–∏—Ç –Ω–∞ –≤–∏–≤–µ–¥–µ–Ω–Ω—è {amount} —Ç–æ–∫–µ–Ω—ñ–≤ —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ. –û—á—ñ–∫—É–π—Ç–µ –Ω–∞ –æ–±—Ä–æ–±–∫—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
                "ru": f"‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ {amount} —Ç–æ–∫–µ–Ω–æ–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω. –û–∂–∏–¥–∞–π—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
                "en": f"‚úÖ Your request to withdraw {amount} tokens has been successfully created. Wait for processing by the administrator.",
                "de": f"‚úÖ Ihre Anfrage zum Abheben von {amount} Token wurde erfolgreich erstellt. Warten Sie auf die Bearbeitung durch den Administrator."
            }
            
            await message.answer(success_texts.get(lang, success_texts["en"]), reply_markup=get_main_menu(lang))
        else:
            # –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
            error_texts = {
                "ua": "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–ø–∏—Ç –Ω–∞ –≤–∏–≤–µ–¥–µ–Ω–Ω—è. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –±–∞–ª–∞–Ω—Å.",
                "ru": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å.",
                "en": "‚ùå Failed to create withdrawal request. Check your balance.",
                "de": "‚ùå Die Auszahlungsanforderung konnte nicht erstellt werden. √úberpr√ºfen Sie Ihr Guthaben."
            }
            
            await message.answer(error_texts.get(lang, error_texts["en"]), reply_markup=get_main_menu(lang))
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.finish()
    except ValueError:
        # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        lang = await get_user_language(str(message.from_user.id))
        
        # –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        error_texts = {
            "ua": "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–∏. –í–≤–µ–¥—ñ—Ç—å —Ü—ñ–ª–µ —á–∏—Å–ª–æ –±—ñ–ª—å—à–µ 0.",
            "ru": "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0.",
            "en": "‚ùå Invalid amount format. Enter an integer greater than 0.",
            "de": "‚ùå Ung√ºltiges Summenformat. Geben Sie eine ganze Zahl gr√∂√üer als 0 ein."
        }
        
        await message.answer(error_texts.get(lang, error_texts["en"]))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Ç–æ–∫–µ–Ω–∞–º–∏
async def on_cancel_token_operation(callback_query: types.CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    lang = await get_user_language(str(callback_query.from_user.id))
    
    # –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    texts = {
        "ua": "‚ùå –û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.",
        "ru": "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        "en": "‚ùå Operation canceled.",
        "de": "‚ùå Vorgang abgebrochen."
    }
    
    await callback_query.message.edit_text(texts.get(lang, texts["en"]))
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()
    await callback_query.answer()

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def register_token_handlers(dp: Dispatcher):
    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±–∞–ª–∞–Ω—Å–∞
    dp.register_message_handler(cmd_balance, commands="balance", state="*")
    
    # –¢–µ–∫—Å—Ç–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±–∞–ª–∞–Ω—Å–∞
    dp.register_message_handler(
        cmd_balance,
        lambda m: any(token in m.text.lower() for token in ["–±–∞–ª–∞–Ω—Å", "balance", "guthaben", "—Ç–æ–∫–µ–Ω–∏", "—Ç–æ–∫–µ–Ω—ã", "tokens"]),
        state="*"
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
    dp.register_callback_query_handler(on_token_add, lambda c: c.data == "token_add", state="*")
    dp.register_callback_query_handler(on_token_transfer, lambda c: c.data == "token_transfer", state="*")
    dp.register_callback_query_handler(on_token_withdraw, lambda c: c.data == "token_withdraw", state="*")
    dp.register_callback_query_handler(on_buy_tokens, lambda c: c.data.startswith("buy_tokens_"), state="*")
    dp.register_callback_query_handler(on_cancel_token_operation, lambda c: c.data == "cancel_token_operation", state="*")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤
    dp.register_message_handler(process_receiver_id, state=TokenStates.waiting_for_receiver_id)
    dp.register_message_handler(process_transfer_amount, state=TokenStates.waiting_for_transfer_amount)
    dp.register_message_handler(process_withdrawal_amount, state=TokenStates.waiting_for_withdrawal_amount)
