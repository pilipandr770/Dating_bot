# —Ñ–∞–π–ª: app/handlers/admin.py

from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from app.services.token_service import approve_withdrawal, reject_withdrawal
from app.models.token_withdrawals import TokenWithdrawal
from app.database import get_session
from sqlalchemy import select, and_
import os
from dotenv import load_dotenv
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
load_dotenv()
ADMIN_IDS = os.getenv("ADMIN_IDS", "").split(",")

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
class AdminStates(StatesGroup):
    waiting_for_withdrawal_action = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è —Å –∑–∞—è–≤–∫–æ–π

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
def is_admin(telegram_id: str) -> bool:
    return telegram_id in ADMIN_IDS

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin - –ø–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é
async def cmd_admin(message: types.Message):
    telegram_id = str(message.from_user.id)
    
    if not is_admin(telegram_id):
        return
    
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    markup = InlineKeyboardMarkup(row_width=1)
    markup.add(
        InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_stats"),
        InlineKeyboardButton("üí∏ –ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥", callback_data="admin_withdrawals"),
        InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞", callback_data="admin_update_bot")
    )
    
    await message.answer("üë®‚Äçüíª –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥
async def on_admin_withdrawals(callback_query: types.CallbackQuery):
    telegram_id = str(callback_query.from_user.id)
    
    if not is_admin(telegram_id):
        await callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ –∑–∞—è–≤–∫–∏
    async for session in get_session():
        try:
            withdrawals = await session.scalars(
                select(TokenWithdrawal)
                .where(TokenWithdrawal.status == "pending")
                .order_by(TokenWithdrawal.timestamp)
            )
            
            withdrawals_list = list(withdrawals)
            
            if not withdrawals_list:
                await callback_query.message.edit_text("‚úÖ –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥.")
                await callback_query.answer()
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
            from app.models.user import User
            
            response = "üìù –ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥ —Ç–æ–∫–µ–Ω–æ–≤:\n\n"
            
            from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
            markup = InlineKeyboardMarkup(row_width=2)
            
            for withdrawal in withdrawals_list:
                user = await session.scalar(select(User).where(User.id == withdrawal.user_id))
                username = user.username if user and user.username else "Unknown"
                
                response += f"ID: {withdrawal.id}\n"
                response += f"User: {username} (ID: {withdrawal.user_id})\n"
                response += f"Amount: {withdrawal.token_amount} tokens\n"
                response += f"Date: {withdrawal.timestamp}\n\n"
                
                markup.add(
                    InlineKeyboardButton(f"‚úÖ Approve #{withdrawal.id}", callback_data=f"admin_approve_{withdrawal.id}"),
                    InlineKeyboardButton(f"‚ùå Reject #{withdrawal.id}", callback_data=f"admin_reject_{withdrawal.id}")
                )
            
            markup.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back"))
            
            await callback_query.message.edit_text(response, reply_markup=markup)
            await callback_query.answer()
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥: {str(e)}")
            await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥.")
            await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥
async def on_admin_approve_withdrawal(callback_query: types.CallbackQuery):
    telegram_id = str(callback_query.from_user.id)
    
    if not is_admin(telegram_id):
        await callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    withdrawal_id = int(callback_query.data.split('_')[2])
    
    success = await approve_withdrawal(withdrawal_id)
    
    if success:
        await callback_query.message.edit_text(f"‚úÖ –ó–∞—è–≤–∫–∞ #{withdrawal_id} —É—Å–ø–µ—à–Ω–æ –æ–¥–æ–±—Ä–µ–Ω–∞.")
    else:
        await callback_query.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ #{withdrawal_id}.")
    
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥
async def on_admin_reject_withdrawal(callback_query: types.CallbackQuery):
    telegram_id = str(callback_query.from_user.id)
    
    if not is_admin(telegram_id):
        await callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    withdrawal_id = int(callback_query.data.split('_')[2])
    
    success = await reject_withdrawal(withdrawal_id)
    
    if success:
        await callback_query.message.edit_text(f"‚úÖ –ó–∞—è–≤–∫–∞ #{withdrawal_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –¢–æ–∫–µ–Ω—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    else:
        await callback_query.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ #{withdrawal_id}.")
    
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∞–¥–º–∏–Ω—Å–∫–æ–º—É –º–µ–Ω—é
async def on_admin_back(callback_query: types.CallbackQuery):
    telegram_id = str(callback_query.from_user.id)
    
    if not is_admin(telegram_id):
        await callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    markup = InlineKeyboardMarkup(row_width=1)
    markup.add(
        InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_stats"),
        InlineKeyboardButton("üí∏ –ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥", callback_data="admin_withdrawals"),
        InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞", callback_data="admin_update_bot")
    )
    
    await callback_query.message.edit_text("üë®‚Äçüíª –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=markup)
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏
async def cmd_admin_withdrawal(message: types.Message):
    telegram_id = str(message.from_user.id)
    
    if not is_admin(telegram_id):
        return
    
    parts = message.text.split()
    if len(parts) != 3:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /admin_withdrawal <id> <approve/reject>")
        return
    
    try:
        withdrawal_id = int(parts[1])
        action = parts[2].lower()
        
        if action == "approve":
            success = await approve_withdrawal(withdrawal_id)
            if success:
                await message.answer(f"‚úÖ –ó–∞—è–≤–∫–∞ #{withdrawal_id} —É—Å–ø–µ—à–Ω–æ –æ–¥–æ–±—Ä–µ–Ω–∞.")
            else:
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ #{withdrawal_id}.")
        elif action == "reject":
            success = await reject_withdrawal(withdrawal_id)
            if success:
                await message.answer(f"‚úÖ –ó–∞—è–≤–∫–∞ #{withdrawal_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –¢–æ–∫–µ–Ω—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
            else:
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ #{withdrawal_id}.")
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'approve' –∏–ª–∏ 'reject'.")
    except ValueError:
        await message.answer("‚ùå ID –∑–∞—è–≤–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏: {str(e)}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏: {str(e)}")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def register_admin_handlers(dp: Dispatcher):
    dp.register_message_handler(cmd_admin, commands="admin", state="*")
    dp.register_message_handler(cmd_admin_withdrawal, commands="admin_withdrawal", state="*")
    
    dp.register_callback_query_handler(on_admin_withdrawals, lambda c: c.data == "admin_withdrawals", state="*")
    dp.register_callback_query_handler(on_admin_approve_withdrawal, lambda c: c.data.startswith("admin_approve_"), state="*")
    dp.register_callback_query_handler(on_admin_reject_withdrawal, lambda c: c.data.startswith("admin_reject_"), state="*")
    dp.register_callback_query_handler(on_admin_back, lambda c: c.data == "admin_back", state="*")
