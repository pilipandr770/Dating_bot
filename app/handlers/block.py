# —Ñ–∞–π–ª: app/handlers/block.py

from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from sqlalchemy import select, or_
from app.models.user import User
from app.models.match import Match
from app.models.blocked_users import BlockedUser
from app.services.block_service import block_user, unblock_user, get_blocked_users
from app.services.user_service import get_user_language
from app.database import get_session
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
class BlockState(StatesGroup):
    waiting_for_reason = State()
    confirm_unblock = State()

# –ö–æ–º–∞–Ω–¥–∞ /block –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async def cmd_block_list(message: types.Message):
    tg_id = str(message.from_user.id)
    lang = await get_user_language(tg_id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    blocked_users = await get_blocked_users(tg_id)
    
    if not blocked_users:
        texts = {
            "ua": "–£ –≤–∞—Å –Ω–µ–º–∞—î –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.",
            "ru": "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
            "en": "You don't have any blocked users.",
            "de": "Sie haben keine blockierten Benutzer."
        }
        return await message.answer(texts.get(lang, texts["ua"]))
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    titles = {
        "ua": "üìã –°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:",
        "ru": "üìã –°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:",
        "en": "üìã List of blocked users:",
        "de": "üìã Liste der blockierten Benutzer:"
    }
    
    text = titles.get(lang, titles["ua"]) + "\n\n"
    kb = InlineKeyboardMarkup(row_width=1)
    
    for user in blocked_users:
        text += f"üë§ {user['name']}, {user['age']}\n"
        if user['reason']:
            text += f"üö´ {user['reason']}\n"
        text += f"üìÖ {user['blocked_at'].strftime('%d.%m.%Y')}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        unblock_texts = {
            "ua": f"–†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏ {user['name']}",
            "ru": f"–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å {user['name']}",
            "en": f"Unblock {user['name']}",
            "de": f"Entsperren {user['name']}"
        }
        kb.add(InlineKeyboardButton(
            unblock_texts.get(lang, unblock_texts["ua"]),
            callback_data=f"unblock_{user['id']}"
        ))
    
    await message.answer(text, reply_markup=kb)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –∏–ª–∏ —á–∞—Ç–∞
async def block_user_callback(callback_query: types.CallbackQuery, state: FSMContext):
    data = callback_query.data
    if not data.startswith("block_"):
        return
    
    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    user_id = int(data.split("_")[1])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(block_user_id=user_id)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    tg_id = str(callback_query.from_user.id)
    lang = await get_user_language(tg_id)
    
    texts = {
        "ua": "–í–∫–∞–∂—ñ—Ç—å –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫—É–≤–∞–Ω–Ω—è (–∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /skip —â–æ–± –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏):",
        "ru": "–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):",
        "en": "Please specify the reason for blocking (or press /skip to skip):",
        "de": "Bitte geben Sie den Grund f√ºr die Sperrung an (oder dr√ºcken Sie /skip zum √úberspringen):"
    }
    
    await callback_query.message.answer(texts.get(lang, texts["ua"]))
    await BlockState.waiting_for_reason.set()
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —á–∞—Å–∏–∫–∏
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø—Ä–∏—á–∏–Ω—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
async def process_block_reason(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user_id = data.get("block_user_id")
    
    if not user_id:
        await state.finish()
        return await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    reason = None
    if message.text and not message.text.startswith("/skip"):
        reason = message.text
    
    # –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    tg_id = str(message.from_user.id)
    success = await block_user(tg_id, user_id, reason)
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º FSM
    await state.finish()
    
    # –°–æ–æ–±—â–∞–µ–º –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
    lang = await get_user_language(tg_id)
    
    if success:
        texts = {
            "ua": "‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π.",
            "ru": "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.",
            "en": "‚úÖ User has been blocked.",
            "de": "‚úÖ Benutzer wurde blockiert."
        }
    else:
        texts = {
            "ua": "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–±–ª–æ–∫—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.",
            "ru": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
            "en": "‚ùå Failed to block user.",
            "de": "‚ùå Benutzer konnte nicht blockiert werden."
        }
    
    # Import keyboard for main menu
    from app.keyboards.main_menu import get_main_menu
    main_menu = get_main_menu(lang)
    
    await message.answer(texts.get(lang, texts["ua"]), reply_markup=main_menu)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /skip –ø—Ä–∏ –≤–≤–æ–¥–µ –ø—Ä–∏—á–∏–Ω—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
async def skip_block_reason(message: types.Message, state: FSMContext):
    # –í—ã–∑—ã–≤–∞–µ–º —Ç–æ—Ç –∂–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –Ω–æ —Å –ø—É—Å—Ç—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    message.text = None
    await process_block_reason(message, state)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def unblock_user_callback(callback_query: types.CallbackQuery):
    data = callback_query.data
    if not data.startswith("unblock_"):
        return
    
    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    user_id = int(data.split("_")[1])
    
    # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    tg_id = str(callback_query.from_user.id)
    success = await unblock_user(tg_id, user_id)
    
    # –°–æ–æ–±—â–∞–µ–º –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
    lang = await get_user_language(tg_id)
    
    if success:
        texts = {
            "ua": "‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–∏–π.",
            "ru": "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.",
            "en": "‚úÖ User has been unblocked.",
            "de": "‚úÖ Benutzer wurde entsperrt."
        }
    else:
        texts = {
            "ua": "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.",
            "ru": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
            "en": "‚ùå Failed to unblock user.",
            "de": "‚ùå Benutzer konnte nicht entsperrt werden."
        }
    
    await callback_query.message.answer(texts.get(lang, texts["ua"]))
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await cmd_block_list(callback_query.message)
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —á–∞—Å–∏–∫–∏
    await callback_query.answer()

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def register_block_handlers(dp: Dispatcher):
    dp.register_message_handler(cmd_block_list, commands=["block", "blocked"])
    dp.register_callback_query_handler(block_user_callback, lambda c: c.data and c.data.startswith("block_"))
    dp.register_callback_query_handler(unblock_user_callback, lambda c: c.data and c.data.startswith("unblock_"))
    dp.register_message_handler(skip_block_reason, commands=["skip"], state=BlockState.waiting_for_reason)
    dp.register_message_handler(process_block_reason, state=BlockState.waiting_for_reason)
