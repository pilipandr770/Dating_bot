# —Ñ–∞–π–ª: app/handlers/search_settings.py

from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from app.keyboards.search_settings import get_search_settings_menu, get_gender_preference_keyboard, get_city_filter_keyboard
from app.keyboards.main_menu import get_main_menu
from app.services.search_settings_service import get_search_settings_by_telegram_id, update_search_settings
from app.services.user_service import get_user_language

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–∏—Å–∫–∞
class SearchSettingsStates(StatesGroup):
    main_settings = State()  # –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
    age_min = State()        # –í–≤–æ–¥ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞
    age_max = State()        # –í–≤–æ–¥ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞
    gender_pref = State()    # –í—ã–±–æ—Ä –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–æ–≥–æ –ø–æ–ª–∞
    distance = State()       # –í–≤–æ–¥ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
    city_filter = State()    # –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –≥–æ—Ä–æ–¥—É

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞
async def cmd_search_settings(message: types.Message, state: FSMContext):
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()
    
    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    lang = await get_user_language(str(message.from_user.id))
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    settings = await get_search_settings_by_telegram_id(str(message.from_user.id))
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    if settings:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è–∑—ã–∫–∞
        texts = {
            "ua": {
                "title": "‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–æ—à—É–∫—É",
                "age": "üî¢ –í—ñ–∫: {min_age}-{max_age} —Ä–æ–∫—ñ–≤",
                "gender": {
                    "—á–æ–ª–æ–≤—ñ–∫": "üë® –ß–æ–ª–æ–≤—ñ–∫–∏",
                    "–∂—ñ–Ω–∫–∞": "üë© –ñ—ñ–Ω–∫–∏",
                    None: "üë• –ë—É–¥—å-—è–∫–∏–π"
                },
                "distance": "üåç –í—ñ–¥—Å—Ç–∞–Ω—å –ø–æ—à—É–∫—É: {distance} –∫–º",
                "city_filter": {
                    True: "üèôÔ∏è –¢—ñ–ª—å–∫–∏ –≤ –º–æ—î–º—É –º—ñ—Å—Ç—ñ: –í–∫–ª—é—á–µ–Ω–æ",
                    False: "üèôÔ∏è –¢—ñ–ª—å–∫–∏ –≤ –º–æ—î–º—É –º—ñ—Å—Ç—ñ: –í–∏–º–∫–Ω–µ–Ω–æ"
                },
                "choose_option": "–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –¥–ª—è –∑–º—ñ–Ω–∏:"
            },
            "ru": {
                "title": "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞",
                "age": "üî¢ –í–æ–∑—Ä–∞—Å—Ç: {min_age}-{max_age} –ª–µ—Ç",
                "gender": {
                    "—á–æ–ª–æ–≤—ñ–∫": "üë® –ú—É–∂—á–∏–Ω—ã",
                    "–∂—ñ–Ω–∫–∞": "üë© –ñ–µ–Ω—â–∏–Ω—ã",
                    None: "üë• –õ—é–±–æ–π"
                },
                "distance": "üåç –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞: {distance} –∫–º",
                "city_filter": {
                    True: "üèôÔ∏è –¢–æ–ª—å–∫–æ –≤ –º–æ–µ–º –≥–æ—Ä–æ–¥–µ: –í–∫–ª—é—á–µ–Ω–æ",
                    False: "üèôÔ∏è –¢–æ–ª—å–∫–æ –≤ –º–æ–µ–º –≥–æ—Ä–æ–¥–µ: –í—ã–∫–ª—é—á–µ–Ω–æ"
                },
                "choose_option": "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"
            },
            "en": {
                "title": "‚öôÔ∏è Search Settings",
                "age": "üî¢ Age: {min_age}-{max_age} years",
                "gender": {
                    "—á–æ–ª–æ–≤—ñ–∫": "üë® Men",
                    "–∂—ñ–Ω–∫–∞": "üë© Women",
                    None: "üë• Any"
                },
                "distance": "üåç Search distance: {distance} km",
                "city_filter": {
                    True: "üèôÔ∏è Only in my city: Enabled",
                    False: "üèôÔ∏è Only in my city: Disabled"
                },
                "choose_option": "Choose option to change:"
            },
            "de": {
                "title": "‚öôÔ∏è Sucheinstellungen",
                "age": "üî¢ Alter: {min_age}-{max_age} Jahre",
                "gender": {
                    "—á–æ–ª–æ–≤—ñ–∫": "üë® M√§nner",
                    "–∂—ñ–Ω–∫–∞": "üë© Frauen",
                    None: "üë• Beliebig"
                },
                "distance": "üåç Suchentfernung: {distance} km",
                "city_filter": {
                    True: "üèôÔ∏è Nur in meiner Stadt: Aktiviert",
                    False: "üèôÔ∏è Nur in meiner Stadt: Deaktiviert"
                },
                "choose_option": "W√§hlen Sie eine Option zum √Ñndern:"
            }
        }
        
        t = texts.get(lang, texts["en"])
        
        settings_text = f"{t['title']}\n\n" \
                       f"{t['age'].format(min_age=settings.min_age, max_age=settings.max_age)}\n" \
                       f"{t['gender'].get(settings.preferred_gender, t['gender'][None])}\n" \
                       f"{t['distance'].format(distance=settings.max_distance)}\n" \
                       f"{t['city_filter'][settings.city_filter]}\n\n" \
                       f"{t['choose_option']}"
    else:
        # –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
        settings_text = "‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–æ—à—É–∫—É"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await message.answer(
        settings_text,
        reply_markup=get_search_settings_menu(lang)
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await SearchSettingsStates.main_settings.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
async def back_to_main_menu(message: types.Message, state: FSMContext):
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()
    
    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    lang = await get_user_language(str(message.from_user.id))
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
    back_text = {
        "ua": "‚Ü©Ô∏è –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é",
        "ru": "‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        "en": "‚Ü©Ô∏è Back to main menu",
        "de": "‚Ü©Ô∏è Zur√ºck zum Hauptmen√º"
    }.get(lang, "‚Ü©Ô∏è Back to main menu")
    
    await message.answer(
        back_text,
        reply_markup=get_main_menu(lang)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –æ–ø—Ü–∏–∏ –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
async def settings_menu_choice(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    lang = await get_user_language(str(message.from_user.id))
    
    texts = {
        "ua": {
            "age_range": "üî¢ –í—ñ–∫–æ–≤–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω",
            "min_age": "–í–≤–µ–¥—ñ—Ç—å –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –≤—ñ–∫ (–≤—ñ–¥ 18):",
            "gender": "üë§ –°—Ç–∞—Ç—å",
            "distance": "üåç –í—ñ–¥—Å—Ç–∞–Ω—å –ø–æ—à—É–∫—É",
            "enter_distance": "–í–≤–µ–¥—ñ—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –≤—ñ–¥—Å—Ç–∞–Ω—å –ø–æ—à—É–∫—É –≤ –∫—ñ–ª–æ–º–µ—Ç—Ä–∞—Ö (–≤—ñ–¥ 1 –¥–æ 1000):",
            "city_only": "üèôÔ∏è –¢—ñ–ª—å–∫–∏ –≤ –º–æ—î–º—É –º—ñ—Å—Ç—ñ"
        },
        "ru": {
            "age_range": "üî¢ –í–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω",
            "min_age": "–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 18):",
            "gender": "üë§ –ü–æ–ª",
            "distance": "üåç –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞",
            "enter_distance": "–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö (–æ—Ç 1 –¥–æ 1000):",
            "city_only": "üèôÔ∏è –¢–æ–ª—å–∫–æ –≤ –º–æ–µ–º –≥–æ—Ä–æ–¥–µ"
        },
        "en": {
            "age_range": "üî¢ Age range",
            "min_age": "Enter minimum age (from 18):",
            "gender": "üë§ Gender",
            "distance": "üåç Search distance",
            "enter_distance": "Enter maximum search distance in kilometers (from 1 to 1000):",
            "city_only": "üèôÔ∏è Only in my city"
        },
        "de": {
            "age_range": "üî¢ Altersbereich",
            "min_age": "Geben Sie das Mindestalter ein (ab 18):",
            "gender": "üë§ Geschlecht",
            "distance": "üåç Suchentfernung",
            "enter_distance": "Geben Sie die maximale Suchentfernung in Kilometern ein (von 1 bis 1000):",
            "city_only": "üèôÔ∏è Nur in meiner Stadt"
        }
    }
    
    t = texts.get(lang, texts["en"])
    text = message.text
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∞—è –æ–ø—Ü–∏—è –±—ã–ª–∞ –≤—ã–±—Ä–∞–Ω–∞
    if t["age_range"] in text:
        await message.answer(t["min_age"])
        await SearchSettingsStates.age_min.set()
    
    elif t["gender"] in text:
        await message.answer(
            "–û–±–µ—Ä—ñ—Ç—å –±–∞–∂–∞–Ω—É —Å—Ç–∞—Ç—å –¥–ª—è –ø–æ—à—É–∫—É:",
            reply_markup=get_gender_preference_keyboard(lang)
        )
        await SearchSettingsStates.gender_pref.set()
    
    elif t["distance"] in text:
        await message.answer(t["enter_distance"])
        await SearchSettingsStates.distance.set()
    
    elif t["city_only"] in text:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        settings = await get_search_settings_by_telegram_id(str(message.from_user.id))
        city_filter_active = settings.city_filter if settings else False
        
        await message.answer(
            "–§—ñ–ª—å—Ç—Ä –ø–æ—à—É–∫—É —Ç—ñ–ª—å–∫–∏ –≤ —Ç–≤–æ—î–º—É –º—ñ—Å—Ç—ñ:",
            reply_markup=get_city_filter_keyboard(lang, city_filter_active)
        )
        await SearchSettingsStates.city_filter.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞
async def set_min_age(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    lang = await get_user_language(str(message.from_user.id))
    
    texts = {
        "ua": {
            "max_age": "–¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π –≤—ñ–∫:",
            "error": "‚ùå –í—ñ–∫ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º –≤—ñ–¥ 18 —Ä–æ–∫—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:"
        },
        "ru": {
            "max_age": "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç:",
            "error": "‚ùå –í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 18 –ª–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        },
        "en": {
            "max_age": "Now enter maximum age:",
            "error": "‚ùå Age must be a number from 18 years. Try again:"
        },
        "de": {
            "max_age": "Geben Sie nun das H√∂chstalter ein:",
            "error": "‚ùå Das Alter muss eine Zahl ab 18 Jahren sein. Versuchen Sie es erneut:"
        }
    }
    
    t = texts.get(lang, texts["en"])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ >= 18
    try:
        min_age = int(message.text)
        if min_age < 18:
            raise ValueError("Age must be at least 18")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(min_age=min_age)
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç
        await message.answer(t["max_age"])
        await SearchSettingsStates.age_max.set()
    except ValueError:
        await message.answer(t["error"])

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞
async def set_max_age(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    lang = await get_user_language(str(message.from_user.id))
    
    texts = {
        "ua": {
            "success": "‚úÖ –í—ñ–∫–æ–≤–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ",
            "error": "‚ùå –í—ñ–∫ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º —ñ –±—ñ–ª—å—à–∏–º –∑–∞ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:"
        },
        "ru": {
            "success": "‚úÖ –í–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω",
            "error": "‚ùå –í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –∏ –±–æ–ª—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        },
        "en": {
            "success": "‚úÖ Age range successfully updated",
            "error": "‚ùå Age must be a number and greater than minimum age. Try again:"
        },
        "de": {
            "success": "‚úÖ Altersbereich erfolgreich aktualisiert",
            "error": "‚ùå Das Alter muss eine Zahl und gr√∂√üer als das Mindestalter sein. Versuchen Sie es erneut:"
        }
    }
    
    t = texts.get(lang, texts["en"])
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    min_age = data.get("min_age", 18)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ –∏ –æ–Ω–æ –±–æ–ª—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞
    try:
        max_age = int(message.text)
        if max_age <= min_age:
            raise ValueError("Max age must be greater than min age")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        telegram_id = str(message.from_user.id)
        await update_search_settings(
            telegram_id=telegram_id,
            settings_data={"min_age": min_age, "max_age": max_age}
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
        await message.answer(t["success"])
        await cmd_search_settings(message, state)
        
    except ValueError:
        await message.answer(t["error"])

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–æ–≥–æ –ø–æ–ª–∞
async def set_gender_preference(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    lang = await get_user_language(str(message.from_user.id))
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–æ–∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –≤ –±–∞–∑–µ
    gender_map = {
        # –£–∫—Ä–∞–∏–Ω—Å–∫–∏–π
        "üë® –ß–æ–ª–æ–≤—ñ–∫–∏": "—á–æ–ª–æ–≤—ñ–∫",
        "üë© –ñ—ñ–Ω–∫–∏": "–∂—ñ–Ω–∫–∞",
        "üë• –ë—É–¥—å-—è–∫–∏–π": None,
        # –†—É—Å—Å–∫–∏–π
        "üë® –ú—É–∂—á–∏–Ω—ã": "—á–æ–ª–æ–≤—ñ–∫",
        "üë© –ñ–µ–Ω—â–∏–Ω—ã": "–∂—ñ–Ω–∫–∞",
        "üë• –õ—é–±–æ–π": None,
        # –ê–Ω–≥–ª–∏–π—Å–∫–∏–π
        "üë® Men": "—á–æ–ª–æ–≤—ñ–∫",
        "üë© Women": "–∂—ñ–Ω–∫–∞",
        "üë• Any": None,
        # –ù–µ–º–µ—Ü–∫–∏–π
        "üë® M√§nner": "—á–æ–ª–æ–≤—ñ–∫",
        "üë© Frauen": "–∂—ñ–Ω–∫–∞",
        "üë• Beliebig": None
    }
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
    preferred_gender = gender_map.get(message.text)
    
    if preferred_gender is not None or "Any" in message.text or "–ë—É–¥—å-—è–∫–∏–π" in message.text or "–õ—é–±–æ–π" in message.text or "Beliebig" in message.text:
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        telegram_id = str(message.from_user.id)
        await update_search_settings(
            telegram_id=telegram_id,
            settings_data={"preferred_gender": preferred_gender}
        )
        
        # –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        success_texts = {
            "ua": "‚úÖ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç—ñ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ",
            "ru": "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã",
            "en": "‚úÖ Gender settings successfully updated",
            "de": "‚úÖ Geschlechtseinstellungen erfolgreich aktualisiert"
        }
        
        await message.answer(success_texts.get(lang, success_texts["en"]))
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
        await cmd_search_settings(message, state)
    
    # –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" - –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
    elif "‚¨ÖÔ∏è" in message.text or "Back" in message.text or "Zur√ºck" in message.text or "–ù–∞–∑–∞–¥" in message.text:
        await cmd_search_settings(message, state)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –ø–æ–∏—Å–∫–∞
async def set_max_distance(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    lang = await get_user_language(str(message.from_user.id))
    
    texts = {
        "ua": {
            "success": "‚úÖ –í—ñ–¥—Å—Ç–∞–Ω—å –ø–æ—à—É–∫—É —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–∞",
            "error": "‚ùå –í—ñ–¥—Å—Ç–∞–Ω—å –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ —á–∏—Å–ª–æ–º –≤—ñ–¥ 1 –¥–æ 1000. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:"
        },
        "ru": {
            "success": "‚úÖ –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ",
            "error": "‚ùå –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 1000. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        },
        "en": {
            "success": "‚úÖ Search distance successfully updated",
            "error": "‚ùå Distance must be a number from 1 to 1000. Try again:"
        },
        "de": {
            "success": "‚úÖ Suchentfernung erfolgreich aktualisiert",
            "error": "‚ùå Die Entfernung muss eine Zahl von 1 bis 1000 sein. Versuchen Sie es erneut:"
        }
    }
    
    t = texts.get(lang, texts["en"])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
    try:
        max_distance = int(message.text)
        if max_distance < 1 or max_distance > 1000:
            raise ValueError("Distance must be between 1 and 1000")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        telegram_id = str(message.from_user.id)
        await update_search_settings(
            telegram_id=telegram_id,
            settings_data={"max_distance": max_distance}
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
        await message.answer(t["success"])
        await cmd_search_settings(message, state)
        
    except ValueError:
        await message.answer(t["error"])

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ –≥–æ—Ä–æ–¥–∞
async def toggle_city_filter(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    lang = await get_user_language(str(message.from_user.id))
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≤–∫–ª—é—á–∞–µ–º –∏–ª–∏ –≤—ã–∫–ª—é—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä
    enable_filter = "‚úÖ" in message.text or "Enable" in message.text or "aktivieren" in message.text or "–í–∫–ª—é—á–∏—Ç—å" in message.text or "–í–∫–ª—é—á–∏—Ç–∏" in message.text
    disable_filter = "‚ùå" in message.text or "Disable" in message.text or "deaktivieren" in message.text or "–í—ã–∫–ª—é—á–∏—Ç—å" in message.text or "–í–∏–º–∫–Ω—É—Ç–∏" in message.text
    
    # –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
    success_texts = {
        "ua": {
            True: "‚úÖ –§—ñ–ª—å—Ç—Ä –º—ñ—Å—Ç–∞ —É–≤—ñ–º–∫–Ω–µ–Ω–æ",
            False: "‚úÖ –§—ñ–ª—å—Ç—Ä –º—ñ—Å—Ç–∞ –≤–∏–º–∫–Ω–µ–Ω–æ"
        },
        "ru": {
            True: "‚úÖ –§–∏–ª—å—Ç—Ä –≥–æ—Ä–æ–¥–∞ –≤–∫–ª—é—á–µ–Ω",
            False: "‚úÖ –§–∏–ª—å—Ç—Ä –≥–æ—Ä–æ–¥–∞ –≤—ã–∫–ª—é—á–µ–Ω"
        },
        "en": {
            True: "‚úÖ City filter enabled",
            False: "‚úÖ City filter disabled"
        },
        "de": {
            True: "‚úÖ Stadtfilter aktiviert",
            False: "‚úÖ Stadtfilter deaktiviert"
        }
    }
    
    if enable_filter or disable_filter:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞
        city_filter = enable_filter
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        telegram_id = str(message.from_user.id)
        await update_search_settings(
            telegram_id=telegram_id,
            settings_data={"city_filter": city_filter}
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        await message.answer(success_texts.get(lang, success_texts["en"])[city_filter])
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
        await cmd_search_settings(message, state)
    
    # –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" - –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
    elif "‚¨ÖÔ∏è" in message.text or "Back" in message.text or "Zur√ºck" in message.text or "–ù–∞–∑–∞–¥" in message.text:
        await cmd_search_settings(message, state)

# –§—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def register_search_settings_handlers(dp: Dispatcher):
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞
    dp.register_message_handler(
        cmd_search_settings, 
        lambda m: "‚öôÔ∏è" in m.text and ("–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è" in m.text or "–ù–∞—Å—Ç—Ä–æ–π–∫–∏" in m.text or "Settings" in m.text or "Sucheinstellungen" in m.text),
        state="*"
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    dp.register_message_handler(
        back_to_main_menu, 
        lambda m: "‚¨ÖÔ∏è" in m.text and ("–ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é" in m.text or "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é" in m.text or "Back to menu" in m.text or "Zur√ºck zum Men√º" in m.text),
        state=SearchSettingsStates.main_settings
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –æ–ø—Ü–∏–∏ –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
    dp.register_message_handler(
        settings_menu_choice,
        state=SearchSettingsStates.main_settings
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
    dp.register_message_handler(
        set_min_age,
        state=SearchSettingsStates.age_min
    )
    
    dp.register_message_handler(
        set_max_age,
        state=SearchSettingsStates.age_max
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–æ–≥–æ –ø–æ–ª–∞
    dp.register_message_handler(
        set_gender_preference,
        state=SearchSettingsStates.gender_pref
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –ø–æ–∏—Å–∫–∞
    dp.register_message_handler(
        set_max_distance,
        state=SearchSettingsStates.distance
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ –≥–æ—Ä–æ–¥–∞
    dp.register_message_handler(
        toggle_city_filter,
        state=SearchSettingsStates.city_filter
    )
