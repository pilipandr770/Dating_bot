# —Ñ–∞–π–ª: app/services/user_service.py

from app.database import get_session
from app.models.user import User
from app.models.user_photos import UserPhoto
from sqlalchemy import select, update, text
import asyncio

async def create_user_from_registration(data: dict, telegram_id: str):
    async for session in get_session():
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            check_sql = "SELECT id FROM dating_bot.users WHERE telegram_id = :telegram_id"
            result = await session.execute(text(check_sql), {"telegram_id": telegram_id})
            existing_user_id = result.scalar()
            
            if existing_user_id:
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
                update_sql = """
                UPDATE dating_bot.users 
                SET first_name = :first_name, age = :age, gender = :gender, 
                    orientation = :orientation, city = :city, 
                    bio = :bio, is_verified = :is_verified
                WHERE telegram_id = :telegram_id
                RETURNING id
                """
            else:
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ
                update_sql = """
                INSERT INTO dating_bot.users 
                (telegram_id, first_name, age, gender, orientation, city, language, bio, is_verified)
                VALUES (:telegram_id, :first_name, :age, :gender, :orientation, :city, :language, :bio, :is_verified)
                RETURNING id
                """
            
            # –û–±—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ–±–æ–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            params = {
                "telegram_id": telegram_id,
                "first_name": data.get("name", "Anonymous"),
                "age": data.get("age"),
                "gender": parse_enum(data.get("gender")),
                "orientation": parse_enum(data.get("orientation")),
                "city": data.get("city"),
                "language": data.get("language", "ua"),
                "bio": data.get("bio"),
                "is_verified": False
            }
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å (INSERT –∏–ª–∏ UPDATE)
            result = await session.execute(text(update_sql), params)
            user_id = result.scalar()
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ñ–æ—Ç–æ
            photos = data.get("photos", [])
            for file_id in photos[:5]:
                photo_sql = """
                INSERT INTO dating_bot.user_photos (user_id, file_id)
                VALUES (:user_id, :file_id)
                """
                await session.execute(text(photo_sql), {"user_id": user_id, "file_id": file_id})

            await session.commit()
            return user_id
        except Exception as e:
            await session.rollback()
            print(f"‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –∞–Ω–∫–µ—Ç–∏: {e}")
            return None

def parse_enum(raw: str) -> str:
    if not raw:
        return None
    return raw.lower().replace("üë®", "").replace("üë©", "").replace("‚öß", "")\
                     .replace("üíû", "").replace("üåà", "").replace("üîÅ", "").replace("‚ùî", "").strip()

async def create_or_get_user(telegram_id: str) -> User:
    """
    –°—Ç–≤–æ—Ä—é—î –∞–±–æ –ø–æ–≤–µ—Ä—Ç–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ Telegram ID
    """
    async for session in get_session():
        try:
            # –®—É–∫–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ SQL
            sql = "SELECT * FROM dating_bot.users WHERE telegram_id = :telegram_id"
            result = await session.execute(text(sql), {"telegram_id": telegram_id})
            user_row = result.fetchone()
            
            # –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ ‚Äî —Å—Ç–≤–æ—Ä—é—î–º–æ
            if not user_row:
                insert_sql = """
                INSERT INTO dating_bot.users (telegram_id, first_name)
                VALUES (:telegram_id, :first_name)
                RETURNING *
                """
                result = await session.execute(
                    text(insert_sql), 
                    {"telegram_id": telegram_id, "first_name": "Anonymous"}
                )
                await session.commit()
                user_row = result.fetchone()
            
            # –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ —Ä—è–¥–æ–∫ –∑ –ë–î –Ω–∞ –æ–±'—î–∫—Ç User
            if user_row:
                user = User()
                for key in User.__table__.columns.keys():
                    if key in user_row._mapping:
                        setattr(user, key, user_row._mapping[key])
                return user
            
            return None
        except Exception as e:
            await session.rollback()
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ/–æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {e}")
            return None

async def update_user_field(user_id: str, field: str, value: any) -> bool:
    """
    –û–Ω–æ–≤–ª—é—î –æ–¥–Ω–µ –ø–æ–ª–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ Telegram ID
    """
    async for session in get_session():
        try:
            # –û—Å–æ–±–ª–∏–≤–∞ –æ–±—Ä–æ–±–∫–∞ –¥–ª—è –ø–æ–ª—è language
            if field == "language":
                # –í–∏–∫–æ–Ω—É—î–º–æ –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—ñ–π SQL –∑–∞–ø–∏—Ç
                await session.execute(
                    text("UPDATE dating_bot.users SET language = :lang WHERE telegram_id = :user_id"),
                    {"lang": value, "user_id": user_id}
                )
            # –û—Å–æ–±–ª–∏–≤–∞ –æ–±—Ä–æ–±–∫–∞ –¥–ª—è –ø–æ–ª—ñ–≤ gender —Ç–∞ orientation
            elif field in ["gender", "orientation"]:
                # –û–±—Ä–æ–±–ª—è—î–º–æ, —â–æ–± –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è
                clean_value = parse_enum(value)
                query = (
                    update(User)
                    .where(User.telegram_id == user_id)
                    .values(**{field: clean_value})
                )
                await session.execute(query)
            else:
                query = (
                    update(User)
                    .where(User.telegram_id == user_id)
                    .values(**{field: value})
                )
                await session.execute(query)
            
            await session.commit()
            return True
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –ø–æ–ª—è {field}: {e}")
            await session.rollback()
            return False
        
    return False

async def get_user_language(telegram_id: str) -> str:
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    """
    async for session in get_session():
        try:
            result = await session.execute(
                text("SELECT language FROM dating_bot.users WHERE telegram_id = :telegram_id"),
                {"telegram_id": telegram_id}
            )
            language = result.scalar()
            return language or "ua"  # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –º–æ–≤–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {e}")
            return "ua"  # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞

async def save_user_photos(telegram_id: str, photo_file_ids: list) -> bool:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    """
    if not photo_file_ids:
        return True  # –ù–µ—Ç —Ñ–æ—Ç–æ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        
    async for session in get_session():
        try:
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            sql = "SELECT id FROM dating_bot.users WHERE telegram_id = :telegram_id"
            result = await session.execute(text(sql), {"telegram_id": telegram_id})
            user_id = result.scalar()
            
            if not user_id:
                print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å telegram_id {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
                
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            delete_sql = "DELETE FROM dating_bot.user_photos WHERE user_id = :user_id"
            await session.execute(text(delete_sql), {"user_id": user_id})
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            for file_id in photo_file_ids[:5]:  # –ú–∞–∫—Å–∏–º—É–º 5 —Ñ–æ—Ç–æ
                insert_sql = """
                INSERT INTO dating_bot.user_photos (user_id, file_id)
                VALUES (:user_id, :file_id)
                """
                await session.execute(text(insert_sql), {"user_id": user_id, "file_id": file_id})
                
            await session.commit()
            return True
        except Exception as e:
            await session.rollback()
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {e}")
            return False

async def get_user_by_telegram_id(telegram_id: str) -> User:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ Telegram ID
    
    Args:
        telegram_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Returns:
        User: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
    """
    async for session in get_session():
        try:
            # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ SQLAlchemy
            user = await session.scalar(
                select(User).where(User.telegram_id == telegram_id)
            )
            return user
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID: {e}")
            return None

async def get_user_photos(user_id: int):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ file_id —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ ID
    """
    photo_file_ids = []
    print(f"üì∏ –ó–∞–ø—Ä–æ—Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id}")
    
    async for session in get_session():
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –±–µ–∑ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ uploaded_at
            sql = """
            SELECT file_id FROM dating_bot.user_photos 
            WHERE user_id = :user_id
            """
            result = await session.execute(text(sql), {"user_id": user_id})
            rows = result.fetchall()
            
            for row in rows:
                photo_file_ids.append(row[0])
            
            print(f"üì∏ –ù–∞–π–¥–µ–Ω–æ {len(photo_file_ids)} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id}: {photo_file_ids}")
            return photo_file_ids
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return []
