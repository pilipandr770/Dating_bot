# app/booking/handlers.py

from aiogram import types, Dispatcher
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import logging

from app.booking.keyboards import (
    booking_menu_keyboard, place_type_keyboard
)
from app.database import get_session
from app.services.user_service import get_user_by_telegram_id, get_user_language
from app.models.user import User

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler()]  # –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
)
logger = logging.getLogger(__name__)

# –¢–µ—Å—Ç–æ–≤—ã–π –≤—ã–≤–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger.info("Booking handlers loaded - logging is working")

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ)
class BookingStates(StatesGroup):
    choosing_city = State()
    choosing_place_type = State()

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–≤–µ–¥–µ–Ω–∏—è—Ö - —ç—Ç–æ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤ –±—É–¥—É—â–µ–º
# –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –º–µ—Å—Ç–∞ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–≤–µ–¥–µ–Ω–∏–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
venue_info = {
    "restaurant": [
        {"name": "–ò—Ç–∞–ª—å—è–Ω—Å–∫–∞—è –ø–∏—Ü—Ü–µ—Ä–∏—è", "url": "https://example.com/italian-pizza", "description": "–õ—É—á—à–∞—è –ø–∏—Ü—Ü–∞ –≤ –≥–æ—Ä–æ–¥–µ"},
        {"name": "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω", "url": "https://example.com/french-cuisine", "description": "–ò–∑—ã—Å–∫–∞–Ω–Ω–∞—è —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∞—è –∫—É—Ö–Ω—è"}
    ],
    "cafe": [
        {"name": "–£—é—Ç–Ω–æ–µ –∫–∞—Ñ–µ", "url": "https://example.com/cozy-cafe", "description": "–û—Ç–ª–∏—á–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç—Ä–µ—á –∏ –æ–±—â–µ–Ω–∏—è"},
        {"name": "–ö–æ—Ñ–µ–π–Ω—è \"–ê—Ä–æ–º–∞—Ç\"", "url": "https://example.com/coffee-aroma", "description": "–õ—É—á—à–∏–π –∫–æ—Ñ–µ –∏ –¥–µ—Å–µ—Ä—Ç—ã"}
    ],
    "bar": [
        {"name": "–°–ø–æ—Ä—Ç-–±–∞—Ä", "url": "https://example.com/sports-bar", "description": "–¢—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ –≤—Å–µ—Ö –≤–∞–∂–Ω—ã—Ö –º–∞—Ç—á–µ–π"},
        {"name": "–ö–æ–∫—Ç–µ–π–ª—å-–±–∞—Ä", "url": "https://example.com/cocktail-bar", "description": "–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∞–≤—Ç–æ—Ä—Å–∫–∏–µ –∫–æ–∫—Ç–µ–π–ª–∏"}
    ],
    "cinema": [
        {"name": "–ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä \"–ó–≤–µ–∑–¥–∞\"", "url": "https://example.com/star-cinema", "description": "–ü—Ä–µ–º—å–µ—Ä—ã –∏ –∫–ª–∞—Å—Å–∏–∫–∞ –∫–∏–Ω–æ"},
        {"name": "IMAX –ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä", "url": "https://example.com/imax-cinema", "description": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø–æ–≥—Ä—É–∂–µ–Ω–∏–µ –≤ —Ñ–∏–ª—å–º"}
    ],
    "event": [
        {"name": "–ì–æ—Ä–æ–¥—Å–∫–æ–π –ø–∞—Ä–∫ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π", "url": "https://example.com/city-park", "description": "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–∞ —Å–≤–µ–∂–µ–º –≤–æ–∑–¥—É—Ö–µ"},
        {"name": "–ö–æ–Ω—Ü–µ—Ä—Ç–Ω—ã–π –∑–∞–ª", "url": "https://example.com/concert-hall", "description": "–ñ–∏–≤–∞—è –º—É–∑—ã–∫–∞ –∏ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è"}
    ],
    "park": [
        {"name": "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –ø–∞—Ä–∫", "url": "https://example.com/central-park", "description": "–¢–∏—Ö–∏–µ –∞–ª–ª–µ–∏ –∏ –∫—Ä–∞—Å–∏–≤—ã–µ –≤–∏–¥—ã"},
        {"name": "–ë–æ—Ç–∞–Ω–∏—á–µ—Å–∫–∏–π —Å–∞–¥", "url": "https://example.com/botanical-garden", "description": "–†–µ–¥–∫–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –∏ —ç–∫–∑–æ—Ç–∏—á–µ—Å–∫–∏–µ —Ü–≤–µ—Ç—ã"}
    ]
}

# –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã
texts = {
    "ua": {
        "greeting": "üìÖ *–ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –º—ñ—Å—Ü—è –¥–ª—è –∑—É—Å—Ç—Ä—ñ—á—ñ*\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
        "choose_city": "üåÜ –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞, –¥–µ –≤–∏ –±–∞–∂–∞—î—Ç–µ –∑–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ –º—ñ—Å—Ü–µ:",
        "choose_place_type": "üèô –û–±—Ä–∞–Ω–æ –º—ñ—Å—Ç–æ: *{city}*\n\n–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∑–∞–∫–ª–∞–¥—É:",
        "choose_date": "üìÜ –û–±—Ä–∞–Ω–æ —Ç–∏–ø: *{place_type}*\n\n–û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É –¥–ª—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è:",
        "enter_date": "üìù –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ –†–†–†–†-–ú–ú-–î–î (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 2023-12-25):",
        "select_place": "üîé –ó–Ω–∞–π–¥–µ–Ω—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –¥–ª—è {city} –Ω–∞ {date}:",
        "no_places": "üòî –ù–∞ –∂–∞–ª—å, –º—ñ—Å—Ü—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø–æ—à—É–∫—É.",
        "confirm_booking": "‚úÖ –í–∏ –æ–±—Ä–∞–ª–∏ *{place_name}*\n\nüìç –ê–¥—Ä–µ—Å–∞: {address}\nüïí –î–∞—Ç–∞: {date}\n\n–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è:",
        "booking_confirmed": "üéâ –í–∞—à–µ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!\n\nüè¢ –ú—ñ—Å—Ü–µ: *{place_name}*\nüìç –ê–¥—Ä–µ—Å–∞: {address}\nüïí –î–∞—Ç–∞: {date}\nüîë –ù–æ–º–µ—Ä –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è: `{reference}`",
        "booking_cancelled": "‚ùå –ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.",
        "my_bookings": "üìã *–í–∞—à—ñ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è:*\n\n{bookings_list}",
        "no_bookings": "üìã *–í–∞—à—ñ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è:*\n\n–£ –≤–∞—Å –ø–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –±—Ä–æ–Ω—é–≤–∞–Ω—å.",
        "cancel_confirm": "‚ùì –í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ –±–∞–∂–∞—î—Ç–µ —Å–∫–∞—Å—É–≤–∞—Ç–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è *{place_name}* –Ω–∞ {date}?",
        "booking_delete_success": "‚úÖ –ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ."
    },
    "ru": {
        "greeting": "üìÖ *–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞ –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        "choose_city": "üåÜ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –≥–¥–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –º–µ—Å—Ç–æ:",
        "choose_place_type": "üèô –í—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥: *{city}*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–≤–µ–¥–µ–Ω–∏—è:",
        "choose_date": "üìÜ –í—ã–±—Ä–∞–Ω —Ç–∏–ø: *{place_type}*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:",
        "enter_date": "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2023-12-25):",
        "select_place": "üîé –ù–∞–π–¥–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è {city} –Ω–∞ {date}:",
        "no_places": "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞.",
        "confirm_booking": "‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ *{place_name}*\n\nüìç –ê–¥—Ä–µ—Å: {address}\nüïí –î–∞—Ç–∞: {date}\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:",
        "booking_confirmed": "üéâ –í–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!\n\nüè¢ –ú–µ—Å—Ç–æ: *{place_name}*\nüìç –ê–¥—Ä–µ—Å: {address}\nüïí –î–∞—Ç–∞: {date}\nüîë –ù–æ–º–µ—Ä –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: `{reference}`",
        "booking_cancelled": "‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        "my_bookings": "üìã *–í–∞—à–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:*\n\n{bookings_list}",
        "no_bookings": "üìã *–í–∞—à–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:*\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.",
        "cancel_confirm": "‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ *{place_name}* –Ω–∞ {date}?",
        "booking_delete_success": "‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ."
    },
    "en": {
        "greeting": "üìÖ *Book a place for your date*\n\nChoose an action:",
        "choose_city": "üåÜ Enter the name of the city where you want to book a place:",
        "choose_place_type": "üèô Selected city: *{city}*\n\nChoose the type of venue:",
        "choose_date": "üìÜ Selected type: *{place_type}*\n\nChoose a date for booking:",
        "enter_date": "üìù Please enter a date in YYYY-MM-DD format (for example, 2023-12-25):",
        "select_place": "üîé Found options for {city} on {date}:",
        "no_places": "üòî Unfortunately, no places were found. Try changing your search parameters.",
        "confirm_booking": "‚úÖ You have selected *{place_name}*\n\nüìç Address: {address}\nüïí Date: {date}\n\nConfirm booking:",
        "booking_confirmed": "üéâ Your booking is confirmed!\n\nüè¢ Place: *{place_name}*\nüìç Address: {address}\nüïí Date: {date}\nüîë Booking number: `{reference}`",
        "booking_cancelled": "‚ùå Booking cancelled.",
        "my_bookings": "üìã *Your bookings:*\n\n{bookings_list}",
        "no_bookings": "üìã *Your bookings:*\n\nYou don't have any bookings yet.",
        "cancel_confirm": "‚ùì Are you sure you want to cancel the booking for *{place_name}* on {date}?",
        "booking_delete_success": "‚úÖ Booking successfully cancelled."
    },
    "de": {
        "greeting": "üìÖ *Einen Ort f√ºr Ihr Date buchen*\n\nW√§hlen Sie eine Aktion:",
        "choose_city": "üåÜ Geben Sie den Namen der Stadt ein, in der Sie einen Platz buchen m√∂chten:",
        "choose_place_type": "üèô Ausgew√§hlte Stadt: *{city}*\n\nW√§hlen Sie die Art des Veranstaltungsortes:",
        "choose_date": "üìÜ Ausgew√§hlter Typ: *{place_type}*\n\nW√§hlen Sie ein Datum f√ºr die Buchung:",
        "enter_date": "üìù Bitte geben Sie ein Datum im Format JJJJ-MM-TT ein (zum Beispiel 2023-12-25):",
        "select_place": "üîé Gefundene Optionen f√ºr {city} am {date}:",
        "no_places": "üòî Leider wurden keine Pl√§tze gefunden. Versuchen Sie, Ihre Suchparameter zu √§ndern.",
        "confirm_booking": "‚úÖ Sie haben *{place_name}* ausgew√§hlt\n\nüìç Adresse: {address}\nüïí Datum: {date}\n\nBuchung best√§tigen:",
        "booking_confirmed": "üéâ Ihre Buchung ist best√§tigt!\n\nüè¢ Ort: *{place_name}*\nüìç Adresse: {address}\nüïí Datum: {date}\nüîë Buchungsnummer: `{reference}`",
        "booking_cancelled": "‚ùå Buchung stor–Ω–∏—Ä–æ–≤–∞–Ω–∞.",
        "my_bookings": "üìã *Ihre Buchungen:*\n\n{bookings_list}",
        "no_bookings": "üìã *Ihre Buchungen:*\n\nSie haben noch keine Buchungen.",
        "cancel_confirm": "‚ùì Sind Sie sicher, dass Sie die Buchung f√ºr *{place_name}* am {date} stornieren m√∂chten?",
        "booking_delete_success": "‚úÖ Buchung erfolgreich storniert."
    }
}

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–µ–π
async def get_text(key, lang, **kwargs):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    text = texts.get(lang, texts["en"]).get(key, texts["en"][key])
    return text.format(**kwargs) if kwargs else text

async def get_user_city(telegram_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è"""
    async for session in get_session():
        user = await get_user_by_telegram_id(session, telegram_id)
        return user.city if user and user.city else None

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –∫–æ–ª–±—ç–∫–æ–≤
async def cmd_booking(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è - —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è"""
    telegram_id = str(message.from_user.id)
    lang = await get_user_language(telegram_id)
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    await state.finish()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≥–æ—Ä–æ–¥ –≤ –ø—Ä–æ—Ñ–∏–ª–µ
    user_city = await get_user_city(telegram_id)
    
    if user_city:
        # –ï—Å–ª–∏ –≥–æ—Ä–æ–¥ –∏–∑–≤–µ—Å—Ç–µ–Ω, —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –º–µ—Å—Ç–∞
        logger.info(f"–ì–æ—Ä–æ–¥ –∏–∑–≤–µ—Å—Ç–µ–Ω: {user_city}, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Ç–∏–ø–æ–≤ –º–µ—Å—Ç")
        message_text = await get_text("choose_place_type", lang, city=user_city)
        await message.answer(message_text, reply_markup=place_type_keyboard(lang), parse_mode="Markdown")
    else:
        # –ï—Å–ª–∏ –≥–æ—Ä–æ–¥ –Ω–µ –∏–∑–≤–µ—Å—Ç–µ–Ω, –ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ –≥–æ—Ä–æ–¥
        await BookingStates.choosing_city.set()
        message_text = await get_text("choose_city", lang)
        await message.answer(message_text)
        logger.info("–ì–æ—Ä–æ–¥ –Ω–µ –∏–∑–≤–µ—Å—Ç–µ–Ω, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

async def process_city(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞"""
    telegram_id = str(message.from_user.id)
    city = message.text.strip()
    lang = await get_user_language(telegram_id)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ä–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(city=city)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –º–µ—Å—Ç–∞
    await BookingStates.choosing_place_type.set()
    
    message_text = await get_text("choose_place_type", lang, city=city)
    await message.answer(message_text, reply_markup=place_type_keyboard(lang), parse_mode="Markdown")

async def process_place_type(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –º–µ—Å—Ç–∞ - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è"""
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞
        await call.answer()
        
        telegram_id = str(call.from_user.id)
        lang = await get_user_language(telegram_id)
        
        logger.info(f"process_place_type –≤—ã–∑–≤–∞–Ω —Å callback_data: {call.data}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –º–µ—Å—Ç–∞ –∏–∑ –∫–æ–ª–±—ç–∫–∞
        parts = call.data.split(":")
        if len(parts) < 3:
            logger.error(f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {call.data}")
            await call.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–∏–ø–∞ –º–µ—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        
        place_type = parts[2]
        logger.info(f"–í—ã–±—Ä–∞–Ω —Ç–∏–ø –º–µ—Å—Ç–∞: {place_type}, callback_data: {call.data}")
        
        # –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∏–ø–æ–≤ –º–µ—Å—Ç
        place_type_names = {
            "ua": {"restaurant": "–†–µ—Å—Ç–æ—Ä–∞–Ω", "cafe": "–ö–∞—Ñ–µ", "bar": "–ë–∞—Ä", "cinema": "–ö—ñ–Ω–æ—Ç–µ–∞—Ç—Ä", "event": "–ü–æ–¥—ñ—è", "park": "–ü–∞—Ä–∫"},
            "ru": {"restaurant": "–†–µ—Å—Ç–æ—Ä–∞–Ω", "cafe": "–ö–∞—Ñ–µ", "bar": "–ë–∞—Ä", "cinema": "–ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä", "event": "–°–æ–±—ã—Ç–∏–µ", "park": "–ü–∞—Ä–∫"},
            "en": {"restaurant": "Restaurant", "cafe": "Cafe", "bar": "Bar", "cinema": "Cinema", "event": "Event", "park": "Park"},
            "de": {"restaurant": "Restaurant", "cafe": "Caf√©", "bar": "Bar", "cinema": "Kino", "event": "Veranstaltung", "park": "Park"}
        }
        
        # –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –º–µ—Å—Ç–∞
        place_type_dict = place_type_names.get(lang, place_type_names["en"])
        place_type_localized = place_type_dict.get(place_type, place_type)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≤–µ–¥–µ–Ω–∏—è—Ö –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
        venues = venue_info.get(place_type, [])
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–≤–µ–¥–µ–Ω–∏–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "—Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ"
        if not venues:
            # –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –¥–ª—è "—Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ"
            coming_soon_messages = {
                "ua": f"‚úÖ –í–∏ –æ–±—Ä–∞–ª–∏: *{place_type_localized}*\n\n–ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –∑–∞–∫–ª–∞–¥—ñ–≤ —Ü—å–æ–≥–æ —Ç–∏–ø—É –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–æ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.",
                "ru": f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏: *{place_type_localized}*\n\n–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏–π —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
                "en": f"‚úÖ You selected: *{place_type_localized}*\n\nBooking for venues of this type will be available soon.",
                "de": f"‚úÖ Sie haben ausgew√§hlt: *{place_type_localized}*\n\nBuchungen f√ºr Locations dieses Typs werden in K√ºrze verf√ºgbar sein."
            }
            
            message_text = coming_soon_messages.get(lang, coming_soon_messages["en"])
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
            kb = InlineKeyboardMarkup(row_width=1)
            back_button_text = {"ua": "üîô –ù–∞–∑–∞–¥", "ru": "üîô –ù–∞–∑–∞–¥", "en": "üîô Back", "de": "üîô Zur√ºck"}.get(lang, "üîô Back")
            kb.add(InlineKeyboardButton(back_button_text, callback_data="booking:back"))
            
            await call.message.edit_text(message_text, reply_markup=kb, parse_mode="Markdown")
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ '—Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ' –¥–ª—è —Ç–∏–ø–∞ –º–µ—Å—Ç–∞: {place_type}")
            
        else:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∑–∞–≤–µ–¥–µ–Ω–∏—è–º–∏ –∏ –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
            kb = InlineKeyboardMarkup(row_width=1)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è
            for venue in venues:
                venue_name = venue["name"]
                venue_url = venue["url"]
                kb.add(InlineKeyboardButton(f"üè¢ {venue_name}", url=venue_url))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            back_button_text = {"ua": "üîô –ù–∞–∑–∞–¥", "ru": "üîô –ù–∞–∑–∞–¥", "en": "üîô Back", "de": "üîô Zur√ºck"}.get(lang, "üîô Back")
            kb.add(InlineKeyboardButton(back_button_text, callback_data="booking:back"))
            
            # –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            venue_list_messages = {
                "ua": f"‚úÖ –í–∏ –æ–±—Ä–∞–ª–∏: *{place_type_localized}*\n\n–î–æ—Å—Ç—É–ø–Ω—ñ –∑–∞–∫–ª–∞–¥–∏ —Ü—å–æ–≥–æ —Ç–∏–ø—É:",
                "ru": f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏: *{place_type_localized}*\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞:",
                "en": f"‚úÖ You selected: *{place_type_localized}*\n\nAvailable venues of this type:",
                "de": f"‚úÖ Sie haben ausgew√§hlt: *{place_type_localized}*\n\nVerf√ºgbare Locations dieses Typs:"
            }
            
            message_text = venue_list_messages.get(lang, venue_list_messages["en"])
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await call.message.edit_text(message_text, reply_markup=kb, parse_mode="Markdown")
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –∑–∞–≤–µ–¥–µ–Ω–∏–π –¥–ª—è —Ç–∏–ø–∞ –º–µ—Å—Ç–∞: {place_type}")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.finish()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–∏–ø–∞ –º–µ—Å—Ç–∞: {e}", exc_info=True)
        await call.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")

async def process_date(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã"""
    try:
        await call.answer("–ó–∞–≥—Ä—É–∑–∫–∞...")
        telegram_id = str(call.from_user.id)
        lang = await get_user_language(telegram_id)
        
        logger.info(f"process_date –≤—ã–∑–≤–∞–Ω —Å callback_data: {call.data}")
        
        if call.data == "booking:custom_date":
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª "–î—Ä—É–≥–∞—è –¥–∞—Ç–∞", –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –¥–∞—Ç—É –≤—Ä—É—á–Ω—É—é
            await BookingStates.entering_custom_date.set()
            message_text = await get_text("enter_date", lang)
            await call.message.edit_text(message_text)
            logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –≤–≤–æ–¥ —Å–≤–æ–µ–π –¥–∞—Ç—ã")
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –∏–∑ –∫–æ–ª–±—ç–∫–∞
            parts = call.data.split(":")
            if len(parts) < 3:
                logger.error(f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data –¥–ª—è –¥–∞—Ç—ã: {call.data}")
                await call.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–∞—Ç—ã.")
                return
                
            date = parts[2]
            logger.info(f"–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: {date}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
            if len(date) != 10 or date[4] != '-' or date[7] != '-':
                logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {date}")
                await call.message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return
                
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(date=date)
            logger.info(f"–î–∞—Ç–∞ {date} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –º—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
            await call.message.edit_text("üîç –ü–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–µ—Å—Ç... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –º–µ—Å—Ç
            await show_places_for_booking(call, state)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã: {e}", exc_info=True)
            await call.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    
    except Exception as e:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ process_date: {e}", exc_info=True)
        await call.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def process_custom_date(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –¥–∞—Ç—ã"""
    telegram_id = str(message.from_user.id)
    lang = await get_user_language(telegram_id)
    
    date = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã (–æ—á–µ–Ω—å –ø—Ä–∏–º–∏—Ç–∏–≤–Ω–æ)
    if len(date) != 10 or date[4] != '-' or date[7] != '-':
        message_text = await get_text("enter_date", lang)
        await message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. {message_text}")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(date=date)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –º–µ—Å—Ç
    await show_places_for_booking_message(message, state)

async def show_places_for_booking(call: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –º–µ—Å—Ç –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        telegram_id = str(call.from_user.id)
        lang = await get_user_language(telegram_id)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        try:
            await call.message.edit_text("üîç –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        city = data.get('city')
        date = data.get('date')
        place_type = data.get('place_type')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not city or not date or not place_type:
            logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ: city={city}, date={date}, place_type={place_type}")
            await call.message.edit_text("‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–µ—Å—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.")
            return
        
        logger.info(f"–ó–∞–ø—Ä–æ—Å –º–µ—Å—Ç: city={city}, date={date}, place_type={place_type}")
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –º–µ—Å—Ç
        await BookingStates.viewing_places.set()
        logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ BookingStates.viewing_places")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –º–µ—Å—Ç
            logger.info(f"–í—ã–∑—ã–≤–∞–µ–º service.get_recommendations({city}, {date}, {place_type})")
            recommendations = await service.get_recommendations(city, date, place_type)
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(recommendations)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
            
            # –ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            if recommendations and len(recommendations) > 0:
                # –í—ã–≤–æ–¥–∏–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –º–µ—Å—Ç
                place_types = set([rec.get('type', 'unknown') for rec in recommendations])
                logger.info(f"–¢–∏–ø—ã –º–µ—Å—Ç –≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö: {place_types}")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ç–∏–ø—É –º–µ—Å—Ç–∞
                filtered_recs = [rec for rec in recommendations if rec.get('type') == place_type]
                logger.info(f"–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ —Ç–∏–ø—É '{place_type}': –Ω–∞–π–¥–µ–Ω–æ {len(filtered_recs)} –º–µ—Å—Ç")
                
                # –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä–≤—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö
                logger.info(f"–ü–µ—Ä–≤–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {recommendations[0]}")
                if len(recommendations) > 1:
                    logger.info(f"–í—Ç–æ—Ä–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {recommendations[1]}")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ä–æ–¥–∞ –≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö
                cities_in_rec = set([rec.get('city', 'unknown') for rec in recommendations])
                logger.info(f"–ì–æ—Ä–æ–¥–∞ –≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö: {cities_in_rec}")
            
            if not recommendations:
                logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –º–µ—Å—Ç –¥–ª—è: city={city}, date={date}, place_type={place_type}")
                message_text = await get_text("no_places", lang)
                await call.message.edit_text(message_text)
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            await state.update_data(recommendations=recommendations)
            logger.info(f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –º–µ—Å—Ç
            try:
                message_text = await get_text("select_place", lang, city=city, date=date)
                logger.info(f"–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message_text[:50]}...")
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –º–µ—Å—Ç–∞–º–∏
                kb = places_keyboard(recommendations, lang)
                logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å {len(kb.inline_keyboard)} –∫–Ω–æ–ø–∫–∞–º–∏")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
                await call.message.edit_text(
                    text=message_text,
                    reply_markup=kb,
                    parse_mode="Markdown"
                )
                logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –º–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π: {e}", exc_info=True)
                await call.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –º–µ—Å—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}", exc_info=True)
            await call.message.edit_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –º–µ—Å—Ç: {str(e)[:100]}...")
    
    except Exception as e:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ show_places_for_booking: {e}", exc_info=True)
        try:
            await call.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.")
        except:
            pass

async def show_places_for_booking_message(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –º–µ—Å—Ç –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–¥–ª—è —Å–ª—É—á–∞—è —Å –≤–≤–æ–¥–æ–º —Ç–µ–∫—Å—Ç–∞)"""
    telegram_id = str(message.from_user.id)
    lang = await get_user_language(telegram_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    city = data.get('city')
    date = data.get('date')
    place_type = data.get('place_type')
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –º–µ—Å—Ç
    await BookingStates.viewing_places.set()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.info(f"–ó–∞–ø—Ä–æ—Å –º–µ—Å—Ç (—Å–æ–æ–±—â–µ–Ω–∏–µ): city={city}, date={date}, place_type={place_type}")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –º–µ—Å—Ç
        recommendations = await service.get_recommendations(city, date, place_type)
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(recommendations)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
        
        if not recommendations:
            logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –º–µ—Å—Ç –¥–ª—è: city={city}, date={date}, place_type={place_type}")
            message_text = await get_text("no_places", lang)
            await message.answer(message_text)
            return
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –º–µ—Å—Ç: {e}")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    await state.update_data(recommendations=recommendations)
    
    message_text = await get_text("select_place", lang, city=city, date=date)
    await message.answer(message_text, reply_markup=places_keyboard(recommendations, lang))

async def select_place(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–µ—Å—Ç–∞"""
    await call.answer()
    telegram_id = str(call.from_user.id)
    lang = await get_user_language(telegram_id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –º–µ—Å—Ç–∞ –∏ –µ–≥–æ ID –∏–∑ –∫–æ–ª–±—ç–∫–∞
    try:
        # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info(f"–ü–æ–ª—É—á–µ–Ω callback_data: {call.data}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ñ–æ—Ä–º–∞—Ç callback_data
        if not call.data.startswith("booking:select:"):
            logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {call.data}")
            raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {call.data}")
        
        # –ü–∞—Ä—Å–∏–Ω–≥ —á–∞—Å—Ç–µ–π callback_data —Å –∑–∞–ø–∞—Å–æ–º –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç ":"
        parts = call.data.split(":")
        if len(parts) < 4:
            logger.error(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —á–∞—Å—Ç–µ–π –≤ callback_data: {call.data}, parts={parts}")
            raise ValueError(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —á–∞—Å—Ç–µ–π –≤ callback_data: {call.data}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –∏ ID –º–µ—Å—Ç–∞
        place_type = parts[2]
        place_id = parts[3]
        
        logger.info(f"select_place –≤—ã–∑–≤–∞–Ω —Å callback_data={call.data}, place_type={place_type}, place_id={place_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ callback_data: {e}, callback_data={call.data}", exc_info=True)
        await call.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –º–µ—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.")
        await state.finish()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    recommendations = data.get('recommendations', [])
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(recommendations)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è")
    date = data.get('date')
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –º–µ—Å—Ç–æ –≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö
    selected_place = None
    for rec in recommendations:
        try:
            rec_type = rec.get('type', '')
            rec_id = str(rec.get('id', ''))
            logger.info(f"–°—Ä–∞–≤–Ω–∏–≤–∞–µ–º: –º–µ—Å—Ç–æ –∏–∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π {rec_type}:{rec_id} —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º {place_type}:{place_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª–æ ID, —Ç–∞–∫ –∫–∞–∫ –º—ã –º–æ–≥–ª–∏ –µ–≥–æ –æ–±—Ä–µ–∑–∞—Ç—å –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
            if rec_type == place_type and rec_id.startswith(place_id) or place_id.startswith(rec_id):
                selected_place = rec
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –º–µ—Å—Ç–æ: {rec}")
                break
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {e}, rec={rec}")
    
    if not selected_place:
        # –ï—Å–ª–∏ –º–µ—Å—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö, –ø–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ—é—â–∏—Ö—Å—è –¥–∞–Ω–Ω—ã—Ö
        logger.warning(f"–ú–µ—Å—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö: {place_type}:{place_id}")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–µ—Å—Ç–æ –∏–∑ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        try:
            # –í–æ–∑—å–º–µ–º –¥–∞—Ç—É –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            date_str = data.get('date', datetime.now().strftime("%Y-%m-%d"))
            city = data.get('city', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–æ—Ä–æ–¥')
            
            # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—Ç–µ
            selected_place = {
                'id': place_id,
                'type': place_type,
                'name': f"–ú–µ—Å—Ç–æ {place_id}",
                'address': f"{city}, –∞–¥—Ä–µ—Å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω",
                'time': f"{date_str}T12:00:00",
                'city': city
            }
            
            logger.info(f"–°–æ–∑–¥–∞–Ω–æ –º–µ—Å—Ç–æ –∏–∑ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {selected_place}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ—Å—Ç–∞ –∏–∑ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}", exc_info=True)
            await call.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –º–µ—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.")
            await state.finish()
            return
    
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –º–µ—Å—Ç–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(selected_place=selected_place)
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –º–µ—Å—Ç–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏: {selected_place}")
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        await BookingStates.confirming_booking.set()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –º–µ—Å—Ç–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é: {e}", exc_info=True)
        await call.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.finish()
        return
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    try:
        display_date = date
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO
        time_str = selected_place.get('time', '')
        if isinstance(time_str, str) and "T" in time_str:
            try:
                # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –≤ ISO —Ñ–æ—Ä–º–∞—Ç–µ
                dt = datetime.fromisoformat(time_str.replace("Z", "+00:00"))
                display_date = dt.strftime("%d.%m.%Y %H:%M")
                logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∞ –¥–∞—Ç–∞: {display_date}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏: {e}, time_str={time_str}")
                
                # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
                time_parts = time_str.split("T")
                if len(time_parts) > 1:
                    date_part = time_parts[0]
                    time_part = time_parts[1].split("+")[0]  # –£–¥–∞–ª—è–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è (—á–∞—Å—ã:–º–∏–Ω—É—Ç—ã)
                    time_parts = time_part.split(":")
                    if len(time_parts) >= 2:
                        time_only = f"{time_parts[0]}:{time_parts[1]}"
                        display_date = f"{date_part} {time_only}"
        
        logger.info(f"–û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–∞—Ç–∞/–≤—Ä–µ–º—è: {display_date}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞—Ç—ã: {e}", exc_info=True)
        display_date = str(date)
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –º–µ—Å—Ç–µ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    message_text = await get_text(
        "confirm_booking", 
        lang, 
        place_name=selected_place['name'],
        address=selected_place.get('address', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'),
        date=display_date
    )
    
    # –ü–æ–ª—É—á–∞–µ–º match_id –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –≤ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è
    match_id = data.get('match_id')
    
    await call.message.edit_text(
        message_text, 
        reply_markup=confirm_keyboard(selected_place, lang, match_id),
        parse_mode="Markdown"
    )

async def confirm_booking(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    await call.answer("–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ‚Ä¶")
    telegram_id = str(call.from_user.id)
    lang = await get_user_language(telegram_id)
    
    logger.info(f"confirm_booking –≤—ã–∑–≤–∞–Ω —Å callback_data={call.data}")
    
    # –†–∞–∑–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–ª–±—ç–∫–∞
    try:
        parts = call.data.split(":")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ callback_data
        if len(parts) < 4 or not call.data.startswith("booking:confirm:"):
            logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {call.data}")
            raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {call.data}")
        
        # place_type, place_id –∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ match_id
        place_type = parts[2]
        place_id = parts[3]
        
        # –û—Å—Ç–æ—Ä–æ–∂–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ match_id
        match_id = None
        if len(parts) > 4:
            try:
                match_id = int(parts[4])
            except ValueError:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å match_id '{parts[4]}' –≤ —á–∏—Å–ª–æ")
        
        logger.info(f"Parsed data - place_type: {place_type}, place_id: {place_id}, match_id: {match_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ callback_data: {e}", exc_info=True)
        await call.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.finish()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    selected_place = data.get('selected_place')
    city = data.get('city')
    date = data.get('date')
    
    if not selected_place:
        await call.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.")
        await state.finish()
        return
    
    # –°–æ–∑–¥–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ API
        async for session in get_session():
            user = await get_user_by_telegram_id(session, telegram_id)
            user_name = f"{user.first_name}" if user else f"User {telegram_id}"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–æ–¥ –≤ –¥–∞–Ω–Ω—ã–µ –º–µ—Å—Ç–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if 'city' not in selected_place:
                selected_place['city'] = city
                
            # –°–æ–∑–¥–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            new_res = await service.create_reservation(
                session, 
                user.id if user else int(telegram_id), 
                match_id, 
                selected_place,
                user_name
            )
            await session.commit()
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            display_date = date
            if "T" in selected_place['time']:
                try:
                    dt = datetime.fromisoformat(selected_place['time'].replace("Z", "+00:00"))
                    display_date = dt.strftime("%d.%m.%Y %H:%M")
                except:
                    pass
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            message_text = await get_text(
                "booking_confirmed", 
                lang, 
                place_name=selected_place['name'],
                address=selected_place.get('address', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'),
                date=display_date,
                reference=new_res.external_reference
            )
            
            await call.message.edit_text(message_text, parse_mode="Markdown")
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.finish()
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        await call.message.edit_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.finish()

async def my_bookings(call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–≤–æ–∏—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π"""
    await call.answer()
    telegram_id = str(call.from_user.id)
    lang = await get_user_language(telegram_id)
    
    try:
        async for session in get_session():
            user = await get_user_by_telegram_id(session, telegram_id)
            
            if not user:
                await call.message.edit_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            reservations = await service.get_user_reservations(session, user.id)
            
            if not reservations:
                message_text = await get_text("no_bookings", lang)
                await call.message.edit_text(message_text, parse_mode="Markdown")
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
            bookings_list = []
            for reservation, place in reservations:
                if reservation.status == "cancelled":
                    continue
                    
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                display_date = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                if reservation.reservation_time:
                    try:
                        dt = datetime.fromisoformat(str(reservation.reservation_time).replace("Z", "+00:00"))
                        display_date = dt.strftime("%d.%m.%Y %H:%M")
                    except:
                        pass
                
                booking_text = f"üè¢ *{place.name}*\n"
                booking_text += f"üìÖ {display_date}\n"
                booking_text += f"üîë `{reservation.external_reference}`\n"
                booking_text += f"üìç {place.city or '–ì–æ—Ä–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω'}\n\n"
                
                bookings_list.append(booking_text)
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_text = await get_text("my_bookings", lang, bookings_list="".join(bookings_list))
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            await call.message.edit_text(
                message_text, 
                reply_markup=my_bookings_keyboard(reservations, lang),
                parse_mode="Markdown"
            )
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {e}")
        await call.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.")

async def cancel_reservation(call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    await call.answer()
    telegram_id = str(call.from_user.id)
    lang = await get_user_language(telegram_id)
    
    # –ü–æ–ª—É—á–∞–µ–º ID –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –∫–æ–ª–±—ç–∫–∞
    _, _, reservation_id = call.data.split(":")
    
    try:
        async for session in get_session():
            user = await get_user_by_telegram_id(session, telegram_id)
            
            if not user:
                await call.message.edit_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            # –û—Ç–º–µ–Ω—è–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            cancelled = await service.cancel_reservation(session, int(reservation_id), user.id)
            await session.commit()
            
            if not cancelled:
                await call.message.edit_text("‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
                return
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
            await my_bookings(call)
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        await call.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.")

async def cancel_booking(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã –ø—Ä–æ—Ü–µ—Å—Å–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    await call.answer()
    telegram_id = str(call.from_user.id)
    lang = await get_user_language(telegram_id)
    
    message_text = await get_text("booking_cancelled", lang)
    await call.message.edit_text(message_text)
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()

async def back_to_menu(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    await call.answer()
    telegram_id = str(call.from_user.id)
    lang = await get_user_language(telegram_id)
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≥–æ—Ä–æ–¥ –≤ –ø—Ä–æ—Ñ–∏–ª–µ
    user_city = await get_user_city(telegram_id)
    
    if user_city:
        # –ï—Å–ª–∏ –≥–æ—Ä–æ–¥ –∏–∑–≤–µ—Å—Ç–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –º–µ—Å—Ç–∞
        message_text = await get_text("choose_place_type", lang, city=user_city)
        await call.message.edit_text(message_text, reply_markup=place_type_keyboard(lang), parse_mode="Markdown")
    else:
        # –ï—Å–ª–∏ –≥–æ—Ä–æ–¥ –Ω–µ –∏–∑–≤–µ—Å—Ç–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        message_text = await get_text("greeting", lang)
        await call.message.edit_text(message_text, reply_markup=booking_menu_keyboard(lang), parse_mode="Markdown")
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–µ—Ä–Ω—É–ª—Å—è –≤ –º–µ–Ω—é –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")

def register_booking_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –º–µ–Ω—é –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    dp.register_message_handler(
        cmd_booking, 
        lambda m: any(word in m.text for word in ["üìÖ –ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è", "üìÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", "üìÖ Booking", "üìÖ Buchung"]),
        state="*"
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
    dp.register_message_handler(process_city, state=BookingStates.choosing_city)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –º–µ—Å—Ç–∞
    dp.register_callback_query_handler(
        process_place_type, 
        lambda c: c.data.startswith("booking:type:"), 
        state="*"
    )
    
    # –°–ª—É–∂–µ–±–Ω—ã–µ –∫–æ–ª–±—ç–∫–∏
    dp.register_callback_query_handler(
        back_to_menu, 
        lambda c: c.data == "booking:back", 
        state="*"
    )
