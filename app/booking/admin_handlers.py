# app/booking/admin_handlers.py

from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import logging
import json
from app.database import get_session
from app.booking.models import PlaceType
from app.booking.services_db import VenueService

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∫–∏ –∑–∞–≤–µ–¥–µ–Ω–∏–π
class AdminVenueStates(StatesGroup):
    waiting_for_venue_data = State()
    confirm_add = State()
    confirm_edit = State()
    confirm_delete = State()
    waiting_for_admin_message = State()

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è
async def cmd_admin_add_venue(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∞—à–∞ –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    is_admin = await check_admin_rights(message.from_user.id)
    
    if not is_admin:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    await state.finish()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ñ–æ—Ä–º–∞—Ç—É –¥–∞–Ω–Ω—ã—Ö
    instructions = (
        "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:\n\n"
        "```json\n"
        "{\n"
        '  "name": "–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è",\n'
        '  "type": "restaurant",  // restaurant, cafe, bar, park, cinema, event –∏–ª–∏ other\n'
        '  "city": "–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞",\n'
        '  "url": "https://example.com",  // –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ\n'
        '  "description": "–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è",  // –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ\n'
        '  "address": "–ê–¥—Ä–µ—Å –∑–∞–≤–µ–¥–µ–Ω–∏—è",  // –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ\n'
        '  "admin_message": "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"  // –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ\n'
        "}\n"
        "```\n\n"
        "–ü–æ–ª—è name, type –∏ city —è–≤–ª—è—é—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏."
    )
    
    await message.answer(instructions, parse_mode="Markdown")
    await AdminVenueStates.waiting_for_venue_data.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–≤–µ–¥–µ–Ω–∏–∏
async def process_venue_data(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–≤–µ–¥–µ–Ω–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON"""
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
        try:
            venue_data = json.loads(message.text)
        except json.JSONDecodeError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        required_fields = ["name", "type", "city"]
        missing_fields = [field for field in required_fields if field not in venue_data]
        
        if missing_fields:
            await message.answer(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {', '.join(missing_fields)}")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –º–µ—Å—Ç–∞
        try:
            place_type = PlaceType(venue_data["type"])
        except ValueError:
            valid_types = [t.value for t in PlaceType]
            await message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∑–∞–≤–µ–¥–µ–Ω–∏—è. –î–æ–ø—É—Å—Ç–∏–º—ã–µ —Ç–∏–ø—ã: {', '.join(valid_types)}")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(venue_data=venue_data)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        confirmation_text = (
            f"üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è:\n\n"
            f"üè¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {venue_data['name']}\n"
            f"üîñ –¢–∏–ø: {place_type.value}\n"
            f"üèô –ì–æ—Ä–æ–¥: {venue_data['city']}\n"
        )
        
        if "url" in venue_data:
            confirmation_text += f"üîó URL: {venue_data['url']}\n"
        if "address" in venue_data:
            confirmation_text += f"üìç –ê–¥—Ä–µ—Å: {venue_data['address']}\n"
        if "description" in venue_data:
            confirmation_text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {venue_data['description']}\n"
        if "admin_message" in venue_data:
            confirmation_text += f"‚ÑπÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {venue_data['admin_message']}\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        kb = InlineKeyboardMarkup(row_width=2)
        kb.add(
            InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="admin:venue:confirm_add"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin:venue:cancel")
        )
        
        await message.answer(confirmation_text, reply_markup=kb)
        await AdminVenueStates.confirm_add.set()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ–¥–µ–Ω–∏—è: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–≤–µ–¥–µ–Ω–∏—è
async def confirm_add_venue(call: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–≤–µ–¥–µ–Ω–∏—è"""
    await call.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    venue_data = data.get("venue_data", {})
    
    if not venue_data:
        await call.message.answer("‚ùå –î–∞–Ω–Ω—ã–µ –æ –∑–∞–≤–µ–¥–µ–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.finish()
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≤–µ–¥–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    try:
        async for session in get_session():
            place_type = PlaceType(venue_data["type"])
            
            result = await VenueService.add_venue(
                session=session,
                name=venue_data["name"],
                place_type=place_type,
                city=venue_data["city"],
                url=venue_data.get("url"),
                description=venue_data.get("description"),
                address=venue_data.get("address"),
                admin_message=venue_data.get("admin_message"),
                is_active=True
            )
            
            if result:
                await call.message.edit_text(
                    f"‚úÖ –ó–∞–≤–µ–¥–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n\n"
                    f"üè¢ {result.name}\n"
                    f"üèô {result.city}\n"
                    f"üÜî ID: {result.id}"
                )
            else:
                await call.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–≤–µ–¥–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–≤–µ–¥–µ–Ω–∏—è –≤ –ë–î: {e}")
        await call.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")
    
    await state.finish()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–≤–µ–¥–µ–Ω–∏—è
async def cancel_venue_action(call: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É –¥–µ–π—Å—Ç–≤–∏—è —Å –∑–∞–≤–µ–¥–µ–Ω–∏–µ–º"""
    await call.answer()
    await call.message.edit_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await state.finish()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def check_admin_rights(telegram_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∞—à–∞ –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    # –ù–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ–≤–µ—Ä–∫–∞ ID –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–æ–≤ –∏–ª–∏ –∑–∞–ø—Ä–æ—Å –∫ –ë–î
    # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True
    return True

def register_admin_venue_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏ –∑–∞–≤–µ–¥–µ–Ω–∏–π"""
    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è
    dp.register_message_handler(cmd_admin_add_venue, commands=["add_venue"], state="*")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–≤–µ–¥–µ–Ω–∏–∏
    dp.register_message_handler(process_venue_data, state=AdminVenueStates.waiting_for_venue_data)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π
    dp.register_callback_query_handler(
        confirm_add_venue, 
        lambda c: c.data == "admin:venue:confirm_add", 
        state=AdminVenueStates.confirm_add
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã
    dp.register_callback_query_handler(
        cancel_venue_action, 
        lambda c: c.data == "admin:venue:cancel", 
        state="*"
    )
