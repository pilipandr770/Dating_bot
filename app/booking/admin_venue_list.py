# app/booking/admin_venue_list.py

from aiogram import types, Dispatcher
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import logging

from app.database import get_session
from app.services.user_service import get_user_language
from app.booking.services_db import VenueService

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

async def cmd_list_venues(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∑–∞–≤–µ–¥–µ–Ω–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    telegram_id = str(message.from_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–º–æ–∂–Ω–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å)
    is_admin = True  # TODO: –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    
    if not is_admin:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        async for session in get_session():
            # –û—Ç–ª–∞–¥–∫–∞: –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
            await VenueService.debug_db_schema(session, "dating_bot.places")
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Å–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è –∏–∑ –ë–î
            result = await session.execute("SELECT id, name, type, city, link FROM dating_bot.places")
            venues = result.fetchall()
            
            if not venues:
                await message.answer("üìä –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∑–∞–≤–µ–¥–µ–Ω–∏–π.")
                return
            
            # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≤—Å–µ–º –∑–∞–≤–µ–¥–µ–Ω–∏—è–º
            response = "üìä –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–≤–µ–¥–µ–Ω–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:\n\n"
            
            for venue in venues:
                venue_id, name, venue_type, city, link = venue
                response += f"üÜî {venue_id} | üè¢ {name}\n"
                response += f"üèô –ì–æ—Ä–æ–¥: {city or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                response += f"üîñ –¢–∏–ø: {venue_type or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                if link:
                    response += f"üîó –°—Å—ã–ª–∫–∞: {link}\n"
                response += "---------------------\n\n"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message.answer(response)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–≤–µ–¥–µ–Ω–∏–π: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–≤–µ–¥–µ–Ω–∏–π: {str(e)}")

def register_admin_venue_list_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–ø–∏—Å–∫–∞ –∑–∞–≤–µ–¥–µ–Ω–∏–π"""
    dp.register_message_handler(cmd_list_venues, commands=["list_venues"])
