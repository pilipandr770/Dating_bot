# app/booking/handlers_fixed.py

from aiogram import types, Dispatcher
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import logging
import traceback
from app.database import get_session
from app.services.user_service import get_user_by_telegram_id, get_user_language
from app.booking.keyboards import place_type_keyboard, back_button_keyboard
from app.booking.models import PlaceType
from app.booking.services_db import VenueService
from sqlalchemy import text

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler()]  # –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
)
logger = logging.getLogger(__name__)

# –¢–µ—Å—Ç–æ–≤—ã–π –≤—ã–≤–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger.info("Fixed booking handlers loaded - logging is working")
logger.info("UNIQUE_TEST_MARKER: Handlers_fixed.py is being used - this should appear in logs")

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ)
class BookingStates(StatesGroup):
    choosing_city = State()
    choosing_place_type = State()

# –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã
texts = {
    "ua": {
        "choose_city": "üåÜ –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞, –¥–µ –≤–∏ –±–∞–∂–∞—î—Ç–µ –∑–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ –º—ñ—Å—Ü–µ:",
        "choose_place_type": "üèô –û–±—Ä–∞–Ω–æ –º—ñ—Å—Ç–æ: *{city}*\n\n–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∑–∞–∫–ª–∞–¥—É:",
        "venue_list": "‚úÖ –í–∏ –æ–±—Ä–∞–ª–∏: *{place_type}*\n\n–î–æ—Å—Ç—É–ø–Ω—ñ –∑–∞–∫–ª–∞–¥–∏ —Ü—å–æ–≥–æ —Ç–∏–ø—É:",
        "coming_soon": "‚úÖ –í–∏ –æ–±—Ä–∞–ª–∏: *{place_type}*\n\n–ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –∑–∞–∫–ª–∞–¥—ñ–≤ —Ü—å–æ–≥–æ —Ç–∏–ø—É –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–æ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.",
        "error": "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.",
        "back_button": "üîô –ù–∞–∑–∞–¥"
    },
    "ru": {
        "choose_city": "üåÜ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –≥–¥–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –º–µ—Å—Ç–æ:",
        "choose_place_type": "üèô –í—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥: *{city}*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–≤–µ–¥–µ–Ω–∏—è:",
        "venue_list": "‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏: *{place_type}*\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞:",
        "coming_soon": "‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏: *{place_type}*\n\n–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏–π —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
        "error": "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.",
        "back_button": "üîô –ù–∞–∑–∞–¥"
    },
    "en": {
        "choose_city": "üåÜ Enter the name of the city where you want to book a place:",
        "choose_place_type": "üèô Selected city: *{city}*\n\nChoose the type of venue:",
        "venue_list": "‚úÖ You selected: *{place_type}*\n\nAvailable venues of this type:",
        "coming_soon": "‚úÖ You selected: *{place_type}*\n\nBooking for venues of this type will be available soon.",
        "error": "‚ùå An error occurred. Please try again later.",
        "back_button": "üîô Back"
    },
    "de": {
        "choose_city": "üåÜ Geben Sie den Namen der Stadt ein, in der Sie einen Platz buchen m√∂chten:",
        "choose_place_type": "üèô Ausgew√§hlte Stadt: *{city}*\n\nW√§hlen Sie die Art des Veranstaltungsortes:",
        "venue_list": "‚úÖ Sie haben ausgew√§hlt: *{place_type}*\n\nVerf√ºgbare Locations dieses Typs:",
        "coming_soon": "‚úÖ Sie haben ausgew√§hlt: *{place_type}*\n\nBuchungen f√ºr Locations dieses Typs werden in K√ºrze verf√ºgbar sein.",
        "error": "‚ùå Ein Fehler ist aufgetreten. Bitte versuchen Sie es sp√§ter noch einmal.",
        "back_button": "üîô Zur√ºck"
    }
}

# –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∏–ø–æ–≤ –º–µ—Å—Ç
place_type_names = {
    "ua": {"restaurant": "–†–µ—Å—Ç–æ—Ä–∞–Ω", "cafe": "–ö–∞—Ñ–µ", "bar": "–ë–∞—Ä", "cinema": "–ö—ñ–Ω–æ—Ç–µ–∞—Ç—Ä", "event": "–ü–æ–¥—ñ—è", "park": "–ü–∞—Ä–∫"},
    "ru": {"restaurant": "–†–µ—Å—Ç–æ—Ä–∞–Ω", "cafe": "–ö–∞—Ñ–µ", "bar": "–ë–∞—Ä", "cinema": "–ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä", "event": "–°–æ–±—ã—Ç–∏–µ", "park": "–ü–∞—Ä–∫"},
    "en": {"restaurant": "Restaurant", "cafe": "Cafe", "bar": "Bar", "cinema": "Cinema", "event": "Event", "park": "Park"},
    "de": {"restaurant": "Restaurant", "cafe": "Caf√©", "bar": "Bar", "cinema": "Kino", "event": "Veranstaltung", "park": "Park"}
}

# –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ - –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î
default_venues = {
    "restaurant": [
        {"name": "–†–µ—Å—Ç–æ—Ä–∞–Ω –ú–∞–≤–∫–∞", "url": "https://mavka.ua", "description": "–£–∫—Ä–∞–∏–Ω—Å–∫–∞—è –∫—É—Ö–Ω—è", "admin_message": "–°–∫–∏–¥–∫–∞ 10% –ø–æ –ø—Ä–æ–º–æ–∫–æ–¥—É SOUL_LINK"},
        {"name": "–¢–µ—Å—Ç–æ–≤—ã–π –†–µ—Å—Ç–æ—Ä–∞–Ω", "url": "https://example.com/test-restaurant", "description": "–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏", "admin_message": ""}
    ],
    "cafe": [
        {"name": "–£—é—Ç–Ω–æ–µ –∫–∞—Ñ–µ", "url": "https://example.com/cozy-cafe", "description": "–û—Ç–ª–∏—á–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç—Ä–µ—á –∏ –æ–±—â–µ–Ω–∏—è", "admin_message": ""},
        {"name": "–ö–æ—Ñ–µ–π–Ω—è \"–ê—Ä–æ–º–∞—Ç\"", "url": "https://example.com/coffee-aroma", "description": "–õ—É—á—à–∏–π –∫–æ—Ñ–µ –∏ –¥–µ—Å–µ—Ä—Ç—ã", "admin_message": ""}
    ],
    "bar": [
        {"name": "–°–ø–æ—Ä—Ç-–±–∞—Ä", "url": "https://example.com/sports-bar", "description": "–¢—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ –≤—Å–µ—Ö –≤–∞–∂–Ω—ã—Ö –º–∞—Ç—á–µ–π", "admin_message": ""},
        {"name": "–ö–æ–∫—Ç–µ–π–ª—å-–±–∞—Ä", "url": "https://example.com/cocktail-bar", "description": "–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∞–≤—Ç–æ—Ä—Å–∫–∏–µ –∫–æ–∫—Ç–µ–π–ª–∏", "admin_message": ""}
    ],
    "cinema": [
        {"name": "–ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä \"–ó–≤–µ–∑–¥–∞\"", "url": "https://example.com/star-cinema", "description": "–ü—Ä–µ–º—å–µ—Ä—ã –∏ –∫–ª–∞—Å—Å–∏–∫–∞ –∫–∏–Ω–æ", "admin_message": ""},
        {"name": "IMAX –ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä", "url": "https://example.com/imax-cinema", "description": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø–æ–≥—Ä—É–∂–µ–Ω–∏–µ –≤ —Ñ–∏–ª—å–º", "admin_message": ""}
    ],
    "event": [
        {"name": "–ì–æ—Ä–æ–¥—Å–∫–æ–π –ø–∞—Ä–∫ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π", "url": "https://example.com/city-park", "description": "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–∞ —Å–≤–µ–∂–µ–º –≤–æ–∑–¥—É—Ö–µ", "admin_message": ""},
        {"name": "–ö–æ–Ω—Ü–µ—Ä—Ç–Ω—ã–π –∑–∞–ª", "url": "https://example.com/concert-hall", "description": "–ñ–∏–≤–∞—è –º—É–∑—ã–∫–∞ –∏ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è", "admin_message": ""}
    ],
    "park": [
        {"name": "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –ø–∞—Ä–∫", "url": "https://example.com/central-park", "description": "–¢–∏—Ö–∏–µ –∞–ª–ª–µ–∏ –∏ –∫—Ä–∞—Å–∏–≤—ã–µ –≤–∏–¥—ã", "admin_message": ""},
        {"name": "–ë–æ—Ç–∞–Ω–∏—á–µ—Å–∫–∏–π —Å–∞–¥", "url": "https://example.com/botanical-garden", "description": "–†–µ–¥–∫–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –∏ —ç–∫–∑–æ—Ç–∏—á–µ—Å–∫–∏–µ —Ü–≤–µ—Ç—ã", "admin_message": ""}
    ]
}

async def get_text(key, lang, **kwargs):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    text = texts.get(lang, texts["en"]).get(key, texts["en"][key])
    return text.format(**kwargs) if kwargs else text

async def get_user_city(telegram_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è"""
    async for session in get_session():
        user = await get_user_by_telegram_id(session, telegram_id)
        return user.city if user and user.city else None

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –∫–æ–ª–±—ç–∫–æ–≤
async def cmd_booking(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è - —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è"""
    telegram_id = str(message.from_user.id)
    lang = await get_user_language(telegram_id)
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    await state.finish()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≥–æ—Ä–æ–¥ –≤ –ø—Ä–æ—Ñ–∏–ª–µ
    user_city = await get_user_city(telegram_id)
    
    if user_city:
        # –ï—Å–ª–∏ –≥–æ—Ä–æ–¥ –∏–∑–≤–µ—Å—Ç–µ–Ω, —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –º–µ—Å—Ç–∞
        logger.info(f"–ì–æ—Ä–æ–¥ –∏–∑–≤–µ—Å—Ç–µ–Ω: {user_city}, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Ç–∏–ø–æ–≤ –º–µ—Å—Ç")
        message_text = await get_text("choose_place_type", lang, city=user_city)
        await message.answer(message_text, reply_markup=place_type_keyboard(lang), parse_mode="Markdown")
    else:
        # –ï—Å–ª–∏ –≥–æ—Ä–æ–¥ –Ω–µ –∏–∑–≤–µ—Å—Ç–µ–Ω, –ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ –≥–æ—Ä–æ–¥
        await BookingStates.choosing_city.set()
        message_text = await get_text("choose_city", lang)
        await message.answer(message_text)
        logger.info("–ì–æ—Ä–æ–¥ –Ω–µ –∏–∑–≤–µ—Å—Ç–µ–Ω, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

async def process_city(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞"""
    telegram_id = str(message.from_user.id)
    city = message.text.strip()
    lang = await get_user_language(telegram_id)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ä–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(city=city)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –º–µ—Å—Ç–∞
    await BookingStates.choosing_place_type.set()
    
    message_text = await get_text("choose_place_type", lang, city=city)
    await message.answer(message_text, reply_markup=place_type_keyboard(lang), parse_mode="Markdown")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –≥–æ—Ä–æ–¥: {city}, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Ç–∏–ø–æ–≤ –º–µ—Å—Ç")

async def process_place_type(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –º–µ—Å—Ç–∞ - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è"""
    logger.info("===== –ù–ê–ß–ê–õ–û –û–ë–†–ê–ë–û–¢–ö–ò –í–´–ë–û–†–ê –¢–ò–ü–ê –ú–ï–°–¢–ê =====")
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞
        await call.answer()
        logger.info("[PLACE_TYPE] –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞")
        
        telegram_id = str(call.from_user.id)
        lang = await get_user_language(telegram_id)
        logger.info(f"[PLACE_TYPE] –Ø–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {lang}")
        
        logger.info(f"[PLACE_TYPE] process_place_type –≤—ã–∑–≤–∞–Ω —Å callback_data: {call.data}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –º–µ—Å—Ç–∞ –∏–∑ –∫–æ–ª–±—ç–∫–∞
        parts = call.data.split(":")
        if len(parts) < 3:
            logger.error(f"[PLACE_TYPE] –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {call.data}")
            error_text = await get_text("error", lang)
            await call.message.answer(error_text)
            return
        
        place_type = parts[2]
        logger.info(f"[PLACE_TYPE] –í—ã–±—Ä–∞–Ω —Ç–∏–ø –º–µ—Å—Ç–∞: {place_type}, callback_data: {call.data}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –º–µ—Å—Ç–∞
        place_type_dict = place_type_names.get(lang, place_type_names["en"])
        place_type_localized = place_type_dict.get(place_type, place_type)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        data = await state.get_data()
        city = data.get("city", None)
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∑–∞–≤–µ–¥–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        venues = []
        try:
            async for session in get_session():
                # –û—Ç–ª–∞–¥–∫–∞: –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
                await VenueService.debug_db_schema(session, "dating_bot.places")
                
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è –∏–∑ –ë–î –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                debug_query = text("SELECT id, name, type, city FROM dating_bot.places")
                debug_result = await session.execute(debug_query)
                debug_venues = debug_result.fetchall()
                logger.info(f"–í—Å–µ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏–π –≤ –ë–î: {len(debug_venues)}")
                for v in debug_venues:
                    logger.info(f"ID: {v[0]}, –ò–º—è: {v[1]}, –¢–∏–ø: {v[2]}, –ì–æ—Ä–æ–¥: {v[3]}")
                
                # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≤–µ–¥–µ–Ω–∏—è –∏–∑ –ë–î –ø–æ —Ç–∏–ø—É –∏ –≥–æ—Ä–æ–¥—É
                logger.info(f"–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∑–∞–≤–µ–¥–µ–Ω–∏—è —Ç–∏–ø–∞ '{place_type}' –≤ –≥–æ—Ä–æ–¥–µ '{city}'")
                venues = await VenueService.get_venues_by_type_and_city(session, place_type, city)
                logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(venues)} –∑–∞–≤–µ–¥–µ–Ω–∏–π –∏–∑ –ë–î –¥–ª—è —Ç–∏–ø–∞ {place_type} –≤ –≥–æ—Ä–æ–¥–µ {city or '–ª—é–±–æ–º'}")
        except Exception as db_error:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {db_error}")
            logger.debug(traceback.format_exc())
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            venues = default_venues.get(place_type, [])
            logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: {len(venues)} –∑–∞–≤–µ–¥–µ–Ω–∏–π")
        
        # –ï—Å–ª–∏ –∏–∑ –ë–î –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        if not venues:
            venues = default_venues.get(place_type, [])
            logger.info(f"–ë–î –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: {len(venues)} –∑–∞–≤–µ–¥–µ–Ω–∏–π")
        
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —ç—Ç–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –∏ —Ç–∏–ø–∞ –∑–∞–≤–µ–¥–µ–Ω–∏—è
        admin_message = None
        try:
            logger.info(f"[PLACE_TYPE] –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –¥–ª—è –≥–æ—Ä–æ–¥–∞ '{city}' –∏ —Ç–∏–ø–∞ '{place_type}'")
            from app.booking.services_admin_message import AdminMessageService
            
            async for session in get_session():
                # –í—ã–≤–æ–¥–∏–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                try:
                    admin_messages = await AdminMessageService.list_admin_messages(session)
                    logger.info(f"[PLACE_TYPE] –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–¥–º–∏–Ω—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {len(admin_messages)}")
                    for msg in admin_messages:
                        logger.info(f"[PLACE_TYPE] –î–æ—Å—Ç—É–ø–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: –≥–æ—Ä–æ–¥='{msg.get('city')}', —Ç–∏–ø='{msg.get('place_type')}', —Ç–µ–∫—Å—Ç='{msg.get('message')[:30] if msg.get('message') else 'None'}...'")
                except Exception as list_error:
                    logger.error(f"[PLACE_TYPE] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {list_error}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                city_value = city if city else "Unknown"
                if not isinstance(city_value, str):
                    city_value = str(city_value)
                
                place_type_value = place_type
                if not isinstance(place_type_value, str):
                    place_type_value = str(place_type_value)
                
                logger.info(f"[PLACE_TYPE] –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: –≥–æ—Ä–æ–¥='{city_value}' (—Ç–∏–ø: {type(city_value).__name__}), —Ç–∏–ø –º–µ—Å—Ç–∞='{place_type_value}' (—Ç–∏–ø: {type(place_type_value).__name__})")
                
                # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                try:
                    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    check_table_query = text("SELECT EXISTS (SELECT FROM information_schema.tables WHERE table_schema = 'dating_bot' AND table_name = 'admin_messages');")
                    check_result = await session.execute(check_table_query)
                    table_exists = check_result.scalar()
                    logger.info(f"[PLACE_TYPE] –¢–∞–±–ª–∏—Ü–∞ admin_messages —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {table_exists}")
                    
                    if not table_exists:
                        logger.error("[PLACE_TYPE] –¢–∞–±–ª–∏—Ü–∞ admin_messages –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
                        continue
                    
                    # –¢–µ–ø–µ—Ä—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    admin_message = await AdminMessageService.get_admin_message(session, city_value, place_type_value)
                    
                    if admin_message:
                        logger.info(f"[PLACE_TYPE] –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –≥–æ—Ä–æ–¥–∞ '{city_value}' –∏ —Ç–∏–ø–∞ '{place_type_value}': '{admin_message}'")
                    else:
                        logger.info(f"[PLACE_TYPE] –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –≥–æ—Ä–æ–¥–∞ '{city_value}' –∏ —Ç–∏–ø–∞ '{place_type_value}'")
                        
                        # –ü—Ä–æ–±—É–µ–º –Ω–∞–ø—Ä—è–º—É—é –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∏–∑ –ë–î
                        direct_query = text("""
                            SELECT message FROM dating_bot.admin_messages 
                            WHERE LOWER(city) LIKE LOWER(:city_pattern) 
                            AND LOWER(place_type) = LOWER(:place_type) 
                            LIMIT 1
                        """).bindparams(city_pattern=f"%{city_value}%", place_type=place_type_value)
                        
                        try:
                            direct_result = await session.execute(direct_query)
                            direct_row = direct_result.fetchone()
                            if direct_row:
                                admin_message = direct_row[0]
                                logger.info(f"[PLACE_TYPE] –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π SQL: '{admin_message}'")
                        except Exception as direct_query_error:
                            logger.error(f"[PLACE_TYPE] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä—è–º–æ–º –∑–∞–ø—Ä–æ—Å–µ –∫ –ë–î: {direct_query_error}")
                except Exception as get_msg_error:
                    logger.error(f"[PLACE_TYPE] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {get_msg_error}")
        except Exception as admin_msg_error:
            logger.error(f"[PLACE_TYPE] –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {admin_msg_error}")
            logger.error(f"[PLACE_TYPE] –ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫ –æ—à–∏–±–∫–∏:\n{traceback.format_exc()}")
            
        # –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–≤–µ–¥–µ–Ω–∏–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "—Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ"
        if not venues:
            message_text = await get_text("coming_soon", lang, place_type=place_type_localized)
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
            if admin_message and isinstance(admin_message, str) and admin_message.strip():
                logger.info(f"[PLACE_TYPE] –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ '—Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ': {admin_message[:30]}...")
                message_text += f"\n\n‚ÑπÔ∏è {admin_message}"
            else:
                logger.info(f"[PLACE_TYPE] –ê–¥–º–∏–Ω—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∫ '—Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ'")
                logger.info(f"[PLACE_TYPE] –ó–Ω–∞—á–µ–Ω–∏–µ admin_message: {admin_message}, —Ç–∏–ø: {type(admin_message).__name__}")
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
            kb = InlineKeyboardMarkup(row_width=1)
            back_button_text = await get_text("back_button", lang)
            kb.add(InlineKeyboardButton(back_button_text, callback_data="booking:back"))
            
            # –í—ã–≤–æ–¥–∏–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.info(f"[DEBUG] –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è '—Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ': {message_text}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                logger.info(f"[PLACE_TYPE] –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ '—Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ' —Å Markdown")
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                original_text = call.message.text if call.message.text else "–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞"
                logger.info(f"[PLACE_TYPE] –¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {original_text}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                await call.message.edit_text(message_text, reply_markup=kb, parse_mode="Markdown")
                logger.info(f"[PLACE_TYPE] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ '—Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ' –¥–ª—è —Ç–∏–ø–∞ –º–µ—Å—Ç–∞: {place_type}")
            except Exception as e:
                logger.error(f"[PLACE_TYPE] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è '—Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ': {e}")
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤—ã–∑–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å Markdown
                logger.info(f"[PLACE_TYPE] –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ Markdown. –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {message_text}")
                try:
                    # –û—á–∏—â–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown
                    clean_message_text = message_text.replace('*', '').replace('_', '').replace('`', '')
                    await call.message.edit_text(clean_message_text, reply_markup=kb)
                    logger.info(f"[PLACE_TYPE] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –±–µ–∑ Markdown (–æ—á–∏—â–µ–Ω —Ç–µ–∫—Å—Ç)")
                except Exception as e2:
                    logger.error(f"[PLACE_TYPE] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ –±–µ–∑ Markdown: {e2}")
                    # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    try:
                        await call.message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–≤–µ–¥–µ–Ω–∏–∏ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.", reply_markup=kb)
                        logger.info("[PLACE_TYPE] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞–ø–∞—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
                    except Exception as e3:
                        logger.error(f"[PLACE_TYPE] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø–∞—Å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e3}")
            
        else:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∑–∞–≤–µ–¥–µ–Ω–∏—è–º–∏ –∏ –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
            kb = InlineKeyboardMarkup(row_width=1)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è
            for venue in venues:
                venue_name = venue["name"]
                venue_url = venue["url"]
                kb.add(InlineKeyboardButton(f"üè¢ {venue_name}", url=venue_url))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            back_button_text = await get_text("back_button", lang)
            kb.add(InlineKeyboardButton(back_button_text, callback_data="booking:back"))
            
            # –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_text = await get_text("venue_list", lang, place_type=place_type_localized)
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –æ–±—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –≥–æ—Ä–æ–¥–∞ –∏ —Ç–∏–ø–∞, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
            if admin_message and isinstance(admin_message, str) and admin_message.strip():
                logger.info(f"[PLACE_TYPE] –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–µ–µ –∞–¥–º–∏–Ω—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ —Å–ø–∏—Å–∫—É –∑–∞–≤–µ–¥–µ–Ω–∏–π: {admin_message[:30]}...")
                message_text += f"\n\n‚ÑπÔ∏è {admin_message}"
            else:
                logger.info(f"[PLACE_TYPE] –û–±—â–µ–µ –∞–¥–º–∏–Ω—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ")
                logger.info(f"[PLACE_TYPE] –ó–Ω–∞—á–µ–Ω–∏–µ admin_message: {admin_message}, —Ç–∏–ø: {type(admin_message).__name__}")
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∑–∞–≤–µ–¥–µ–Ω–∏–π, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö
            venue_admin_messages = []
            for venue in venues:
                msg = venue.get("admin_message")
                if msg and isinstance(msg, str) and msg.strip():
                    venue_admin_messages.append(msg)
            
            if venue_admin_messages:
                if not admin_message:  # –ï—Å–ª–∏ –Ω–µ—Ç –æ–±—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ
                    logger.info(f"[PLACE_TYPE] –î–æ–±–∞–≤–ª—è–µ–º {len(venue_admin_messages)} –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–≤–µ–¥–µ–Ω–∏–π")
                    message_text += "\n\n" + "\n\n".join(f"‚ÑπÔ∏è {msg}" for msg in venue_admin_messages)
            
            # –í—ã–≤–æ–¥–∏–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.info(f"[DEBUG] –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–≤–µ–¥–µ–Ω–∏–π: {message_text}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                logger.info(f"[PLACE_TYPE] –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–≤–µ–¥–µ–Ω–∏–π —Å Markdown")
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                original_text = call.message.text if call.message.text else "–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞"
                logger.info(f"[PLACE_TYPE] –¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {original_text}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                await call.message.edit_text(message_text, reply_markup=kb, parse_mode="Markdown")
                logger.info(f"[PLACE_TYPE] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –∑–∞–≤–µ–¥–µ–Ω–∏–π –¥–ª—è —Ç–∏–ø–∞ –º–µ—Å—Ç–∞: {place_type}")
            except Exception as e:
                logger.error(f"[PLACE_TYPE] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–≤–µ–¥–µ–Ω–∏–π: {e}")
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤—ã–∑–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å Markdown
                logger.info(f"[PLACE_TYPE] –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ Markdown. –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {message_text}")
                try:
                    # –û—á–∏—â–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown
                    clean_message_text = message_text.replace('*', '').replace('_', '').replace('`', '')
                    await call.message.edit_text(clean_message_text, reply_markup=kb)
                    logger.info(f"[PLACE_TYPE] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –±–µ–∑ Markdown (–æ—á–∏—â–µ–Ω —Ç–µ–∫—Å—Ç)")
                except Exception as e2:
                    logger.error(f"[PLACE_TYPE] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ –±–µ–∑ Markdown: {e2}")
                    # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    try:
                        venue_list_text = "\n".join([f"üè¢ {v['name']}" for v in venues[:5]])
                        await call.message.answer(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è:\n{venue_list_text}", reply_markup=kb)
                        logger.info("[PLACE_TYPE] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞–ø–∞—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–≤–µ–¥–µ–Ω–∏–π")
                    except Exception as e3:
                        logger.error(f"[PLACE_TYPE] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø–∞—Å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e3}")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.finish()
        logger.info("[PLACE_TYPE] –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        logger.info("===== –ö–û–ù–ï–¶ –û–ë–†–ê–ë–û–¢–ö–ò –í–´–ë–û–†–ê –¢–ò–ü–ê –ú–ï–°–¢–ê =====")
        
    except Exception as e:
        logger.error(f"[PLACE_TYPE] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–∏–ø–∞ –º–µ—Å—Ç–∞: {e}")
        logger.error(f"[PLACE_TYPE] –ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫ –æ—à–∏–±–∫–∏:\n{traceback.format_exc()}")
        try:
            lang = await get_user_language(str(call.from_user.id))
            error_text = await get_text("error", lang)
            await call.message.answer(error_text)
            logger.info("[PLACE_TYPE] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ")
        except Exception as inner_e:
            logger.error(f"[PLACE_TYPE] –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {inner_e}")
            await call.message.answer("‚ùå An error occurred. Please try again later.")
        finally:
            logger.info("===== –ö–û–ù–ï–¶ –û–ë–†–ê–ë–û–¢–ö–ò –í–´–ë–û–†–ê –¢–ò–ü–ê –ú–ï–°–¢–ê (–° –û–®–ò–ë–ö–û–ô) =====")
        

async def back_to_menu(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥'"""
    await call.answer()
    await state.finish()
    
    telegram_id = str(call.from_user.id)
    lang = await get_user_language(telegram_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≥–æ—Ä–æ–¥ –≤ –ø—Ä–æ—Ñ–∏–ª–µ
    user_city = await get_user_city(telegram_id)
    
    if user_city:
        # –ï—Å–ª–∏ –≥–æ—Ä–æ–¥ –∏–∑–≤–µ—Å—Ç–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –º–µ—Å—Ç–∞
        message_text = await get_text("choose_place_type", lang, city=user_city)
        await call.message.edit_text(message_text, reply_markup=place_type_keyboard(lang), parse_mode="Markdown")
    else:
        # –ï—Å–ª–∏ –≥–æ—Ä–æ–¥ –Ω–µ –∏–∑–≤–µ—Å—Ç–µ–Ω, –ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ –≥–æ—Ä–æ–¥
        await BookingStates.choosing_city.set()
        message_text = await get_text("choose_city", lang)
        await call.message.edit_text(message_text)
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–µ—Ä–Ω—É–ª—Å—è –≤ –º–µ–Ω—é –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")

def register_booking_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –º–µ–Ω—é –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    dp.register_message_handler(
        cmd_booking, 
        lambda m: any(word in m.text for word in ["üìÖ –ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è", "üìÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", "üìÖ Booking", "üìÖ Buchung"]),
        state="*"
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
    dp.register_message_handler(process_city, state=BookingStates.choosing_city)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –º–µ—Å—Ç–∞
    dp.register_callback_query_handler(
        process_place_type, 
        lambda c: c.data.startswith("booking:type:"), 
        state="*"
    )
    
    # –°–ª—É–∂–µ–±–Ω—ã–µ –∫–æ–ª–±—ç–∫–∏
    dp.register_callback_query_handler(
        back_to_menu, 
        lambda c: c.data == "booking:back", 
        state="*"
    )
