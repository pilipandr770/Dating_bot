# app/booking/handlers.py

from aiogram import types, Dispatcher
from aiogram.types import Message, CallbackQuery
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from datetime import datetime, timedelta
import logging

from app.booking.services import BookingService
from app.booking.keyboards import (
    booking_menu_keyboard, places_keyboard, confirm_keyboard,
    date_keyboard, place_type_keyboard, my_bookings_keyboard
)
from app.database import get_session
from app.services.user_service import get_user_by_telegram_id, get_user_language
from app.models.user import User

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
service = BookingService()

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
class BookingStates(StatesGroup):
    choosing_city = State()
    choosing_place_type = State()
    choosing_date = State()
    entering_custom_date = State()
    viewing_places = State()
    confirming_booking = State()

# –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã
texts = {
    "ua": {
        "greeting": "üìÖ *–ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –º—ñ—Å—Ü—è –¥–ª—è –∑—É—Å—Ç—Ä—ñ—á—ñ*\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
        "choose_city": "üåÜ –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞, –¥–µ –≤–∏ –±–∞–∂–∞—î—Ç–µ –∑–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ –º—ñ—Å—Ü–µ:",
        "choose_place_type": "üèô –û–±—Ä–∞–Ω–æ –º—ñ—Å—Ç–æ: *{city}*\n\n–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∑–∞–∫–ª–∞–¥—É:",
        "choose_date": "üìÜ –û–±—Ä–∞–Ω–æ —Ç–∏–ø: *{place_type}*\n\n–û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É –¥–ª—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è:",
        "enter_date": "üìù –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ –†–†–†–†-–ú–ú-–î–î (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 2023-12-25):",
        "select_place": "üîé –ó–Ω–∞–π–¥–µ–Ω—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –¥–ª—è {city} –Ω–∞ {date}:",
        "no_places": "üòî –ù–∞ –∂–∞–ª—å, –º—ñ—Å—Ü—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø–æ—à—É–∫—É.",
        "confirm_booking": "‚úÖ –í–∏ –æ–±—Ä–∞–ª–∏ *{place_name}*\n\nüìç –ê–¥—Ä–µ—Å–∞: {address}\nüïí –î–∞—Ç–∞: {date}\n\n–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è:",
        "booking_confirmed": "üéâ –í–∞—à–µ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!\n\nüè¢ –ú—ñ—Å—Ü–µ: *{place_name}*\nüìç –ê–¥—Ä–µ—Å–∞: {address}\nüïí –î–∞—Ç–∞: {date}\nüîë –ù–æ–º–µ—Ä –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è: `{reference}`",
        "booking_cancelled": "‚ùå –ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.",
        "my_bookings": "üìã *–í–∞—à—ñ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è:*\n\n{bookings_list}",
        "no_bookings": "üìã *–í–∞—à—ñ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è:*\n\n–£ –≤–∞—Å –ø–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –±—Ä–æ–Ω—é–≤–∞–Ω—å.",
        "cancel_confirm": "‚ùì –í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ –±–∞–∂–∞—î—Ç–µ —Å–∫–∞—Å—É–≤–∞—Ç–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è *{place_name}* –Ω–∞ {date}?",
        "booking_delete_success": "‚úÖ –ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ."
    },
    "ru": {
        "greeting": "üìÖ *–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞ –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        "choose_city": "üåÜ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –≥–¥–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –º–µ—Å—Ç–æ:",
        "choose_place_type": "üèô –í—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥: *{city}*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–≤–µ–¥–µ–Ω–∏—è:",
        "choose_date": "üìÜ –í—ã–±—Ä–∞–Ω —Ç–∏–ø: *{place_type}*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:",
        "enter_date": "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2023-12-25):",
        "select_place": "üîé –ù–∞–π–¥–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è {city} –Ω–∞ {date}:",
        "no_places": "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞.",
        "confirm_booking": "‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ *{place_name}*\n\nüìç –ê–¥—Ä–µ—Å: {address}\nüïí –î–∞—Ç–∞: {date}\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:",
        "booking_confirmed": "üéâ –í–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!\n\nüè¢ –ú–µ—Å—Ç–æ: *{place_name}*\nüìç –ê–¥—Ä–µ—Å: {address}\nüïí –î–∞—Ç–∞: {date}\nüîë –ù–æ–º–µ—Ä –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: `{reference}`",
        "booking_cancelled": "‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        "my_bookings": "üìã *–í–∞—à–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:*\n\n{bookings_list}",
        "no_bookings": "üìã *–í–∞—à–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:*\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.",
        "cancel_confirm": "‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ *{place_name}* –Ω–∞ {date}?",
        "booking_delete_success": "‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ."
    },
    "en": {
        "greeting": "üìÖ *Book a place for your date*\n\nChoose an action:",
        "choose_city": "üåÜ Enter the name of the city where you want to book a place:",
        "choose_place_type": "üèô Selected city: *{city}*\n\nChoose the type of venue:",
        "choose_date": "üìÜ Selected type: *{place_type}*\n\nChoose a date for booking:",
        "enter_date": "üìù Please enter a date in YYYY-MM-DD format (for example, 2023-12-25):",
        "select_place": "üîé Found options for {city} on {date}:",
        "no_places": "üòî Unfortunately, no places were found. Try changing your search parameters.",
        "confirm_booking": "‚úÖ You have selected *{place_name}*\n\nüìç Address: {address}\nüïí Date: {date}\n\nConfirm booking:",
        "booking_confirmed": "üéâ Your booking is confirmed!\n\nüè¢ Place: *{place_name}*\nüìç Address: {address}\nüïí Date: {date}\nüîë Booking number: `{reference}`",
        "booking_cancelled": "‚ùå Booking cancelled.",
        "my_bookings": "üìã *Your bookings:*\n\n{bookings_list}",
        "no_bookings": "üìã *Your bookings:*\n\nYou don't have any bookings yet.",
        "cancel_confirm": "‚ùì Are you sure you want to cancel the booking for *{place_name}* on {date}?",
        "booking_delete_success": "‚úÖ Booking successfully cancelled."
    },
    "de": {
        "greeting": "üìÖ *Einen Ort f√ºr Ihr Date buchen*\n\nW√§hlen Sie eine Aktion:",
        "choose_city": "üåÜ Geben Sie den Namen der Stadt ein, in der Sie einen Platz buchen m√∂chten:",
        "choose_place_type": "üèô Ausgew√§hlte Stadt: *{city}*\n\nW√§hlen Sie die Art des Veranstaltungsortes:",
        "choose_date": "üìÜ Ausgew√§hlter Typ: *{place_type}*\n\nW√§hlen Sie ein Datum f√ºr die Buchung:",
        "enter_date": "üìù Bitte geben Sie ein Datum im Format JJJJ-MM-TT ein (zum Beispiel 2023-12-25):",
        "select_place": "üîé Gefundene Optionen f√ºr {city} am {date}:",
        "no_places": "üòî Leider wurden keine Pl√§tze gefunden. Versuchen Sie, Ihre Suchparameter zu √§ndern.",
        "confirm_booking": "‚úÖ Sie haben *{place_name}* ausgew√§hlt\n\nüìç Adresse: {address}\nüïí Datum: {date}\n\nBuchung best√§tigen:",
        "booking_confirmed": "üéâ Ihre Buchung ist best√§tigt!\n\nüè¢ Ort: *{place_name}*\nüìç Adresse: {address}\nüïí Datum: {date}\nüîë Buchungsnummer: `{reference}`",
        "booking_cancelled": "‚ùå Buchung storniert.",
        "my_bookings": "üìã *Ihre Buchungen:*\n\n{bookings_list}",
        "no_bookings": "üìã *Ihre Buchungen:*\n\nSie haben noch keine Buchungen.",
        "cancel_confirm": "‚ùì Sind Sie sicher, dass Sie die Buchung f√ºr *{place_name}* am {date} stornieren m√∂chten?",
        "booking_delete_success": "‚úÖ Buchung erfolgreich storniert."
    }
}

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–µ–π
async def get_text(key, lang, **kwargs):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    text = texts.get(lang, texts["en"]).get(key, texts["en"][key])
    return text.format(**kwargs) if kwargs else text

async def get_user_city(telegram_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è"""
    async for session in get_session():
        user = await get_user_by_telegram_id(session, telegram_id)
        return user.city if user and user.city else None

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –∫–æ–ª–±—ç–∫–æ–≤
async def cmd_booking(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    telegram_id = str(message.from_user.id)
    lang = await get_user_language(telegram_id)
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    await state.finish()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≥–æ—Ä–æ–¥ –≤ –ø—Ä–æ—Ñ–∏–ª–µ
    user_city = await get_user_city(telegram_id)
    
    if user_city:
        # –ï—Å–ª–∏ –≥–æ—Ä–æ–¥ –∏–∑–≤–µ—Å—Ç–µ–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(city=user_city)
        # –ò –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –º–µ—Å—Ç–∞
        await BookingStates.choosing_place_type.set()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –≥–æ—Ä–æ–¥–æ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –º–µ—Å—Ç–∞
        message_text = await get_text("choose_place_type", lang, city=user_city)
        await message.answer(message_text, reply_markup=place_type_keyboard(lang), parse_mode="Markdown")
    else:
        # –ï—Å–ª–∏ –≥–æ—Ä–æ–¥ –Ω–µ –∏–∑–≤–µ—Å—Ç–µ–Ω, –ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ –≥–æ—Ä–æ–¥
        await BookingStates.choosing_city.set()
        message_text = await get_text("choose_city", lang)
        await message.answer(message_text)

async def process_city(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞"""
    telegram_id = str(message.from_user.id)
    city = message.text.strip()
    lang = await get_user_language(telegram_id)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ä–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(city=city)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –º–µ—Å—Ç–∞
    await BookingStates.choosing_place_type.set()
    
    message_text = await get_text("choose_place_type", lang, city=city)
    await message.answer(message_text, reply_markup=place_type_keyboard(lang), parse_mode="Markdown")

async def process_place_type(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –º–µ—Å—Ç–∞"""
    await call.answer()
    telegram_id = str(call.from_user.id)
    lang = await get_user_language(telegram_id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –º–µ—Å—Ç–∞ –∏–∑ –∫–æ–ª–±—ç–∫–∞
    _, _, place_type = call.data.split(":")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –º–µ—Å—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(place_type=place_type)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã
    await BookingStates.choosing_date.set()
    
    # –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∏–ø–æ–≤ –º–µ—Å—Ç
    place_type_names = {
        "ua": {"restaurant": "–†–µ—Å—Ç–æ—Ä–∞–Ω", "cafe": "–ö–∞—Ñ–µ", "bar": "–ë–∞—Ä", "cinema": "–ö—ñ–Ω–æ—Ç–µ–∞—Ç—Ä", "event": "–ü–æ–¥—ñ—è"},
        "ru": {"restaurant": "–†–µ—Å—Ç–æ—Ä–∞–Ω", "cafe": "–ö–∞—Ñ–µ", "bar": "–ë–∞—Ä", "cinema": "–ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä", "event": "–°–æ–±—ã—Ç–∏–µ"},
        "en": {"restaurant": "Restaurant", "cafe": "Cafe", "bar": "Bar", "cinema": "Cinema", "event": "Event"},
        "de": {"restaurant": "Restaurant", "cafe": "Caf√©", "bar": "Bar", "cinema": "Kino", "event": "Veranstaltung"}
    }
    
    place_type_localized = place_type_names.get(lang, place_type_names["en"]).get(place_type, place_type)
    
    message_text = await get_text("choose_date", lang, place_type=place_type_localized)
    await call.message.edit_text(message_text, reply_markup=date_keyboard(lang), parse_mode="Markdown")

async def process_date(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã"""
    await call.answer()
    telegram_id = str(call.from_user.id)
    lang = await get_user_language(telegram_id)
    
    if call.data == "booking:custom_date":
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª "–î—Ä—É–≥–∞—è –¥–∞—Ç–∞", –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –¥–∞—Ç—É –≤—Ä—É—á–Ω—É—é
        await BookingStates.entering_custom_date.set()
        message_text = await get_text("enter_date", lang)
        await call.message.edit_text(message_text)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –∏–∑ –∫–æ–ª–±—ç–∫–∞
    _, _, date = call.data.split(":")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(date=date)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –º–µ—Å—Ç
    await show_places_for_booking(call, state)

async def process_custom_date(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –¥–∞—Ç—ã"""
    telegram_id = str(message.from_user.id)
    lang = await get_user_language(telegram_id)
    
    date = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã (–æ—á–µ–Ω—å –ø—Ä–∏–º–∏—Ç–∏–≤–Ω–æ)
    if len(date) != 10 or date[4] != '-' or date[7] != '-':
        message_text = await get_text("enter_date", lang)
        await message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. {message_text}")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(date=date)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –º–µ—Å—Ç
    await show_places_for_booking_message(message, state)

async def show_places_for_booking(call: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –º–µ—Å—Ç –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    telegram_id = str(call.from_user.id)
    lang = await get_user_language(telegram_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    city = data.get('city')
    date = data.get('date')
    place_type = data.get('place_type')
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –º–µ—Å—Ç
    await BookingStates.viewing_places.set()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –º–µ—Å—Ç
    recommendations = await service.get_recommendations(city, date, place_type)
    
    if not recommendations:
        message_text = await get_text("no_places", lang)
        await call.message.edit_text(message_text)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    await state.update_data(recommendations=recommendations)
    
    message_text = await get_text("select_place", lang, city=city, date=date)
    await call.message.edit_text(message_text, reply_markup=places_keyboard(recommendations, lang))

async def show_places_for_booking_message(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –º–µ—Å—Ç –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–¥–ª—è —Å–ª—É—á–∞—è —Å –≤–≤–æ–¥–æ–º —Ç–µ–∫—Å—Ç–∞)"""
    telegram_id = str(message.from_user.id)
    lang = await get_user_language(telegram_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    city = data.get('city')
    date = data.get('date')
    place_type = data.get('place_type')
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –º–µ—Å—Ç
    await BookingStates.viewing_places.set()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –º–µ—Å—Ç
    recommendations = await service.get_recommendations(city, date, place_type)
    
    if not recommendations:
        message_text = await get_text("no_places", lang)
        await message.answer(message_text)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    await state.update_data(recommendations=recommendations)
    
    message_text = await get_text("select_place", lang, city=city, date=date)
    await message.answer(message_text, reply_markup=places_keyboard(recommendations, lang))

async def select_place(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–µ—Å—Ç–∞"""
    await call.answer()
    telegram_id = str(call.from_user.id)
    lang = await get_user_language(telegram_id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –º–µ—Å—Ç–∞ –∏ –µ–≥–æ ID –∏–∑ –∫–æ–ª–±—ç–∫–∞
    _, _, place_type, place_id = call.data.split(":")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    recommendations = data.get('recommendations', [])
    date = data.get('date')
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –º–µ—Å—Ç–æ –≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö
    selected_place = None
    for rec in recommendations:
        if rec['type'] == place_type and str(rec['id']) == place_id:
            selected_place = rec
            break
    
    if not selected_place:
        # –ï—Å–ª–∏ –º–µ—Å—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö, —ç—Ç–æ –æ—à–∏–±–∫–∞
        await call.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.")
        await state.finish()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –º–µ—Å—Ç–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(selected_place=selected_place)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    await BookingStates.confirming_booking.set()
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    display_date = date
    if "T" in selected_place['time']:
        try:
            dt = datetime.fromisoformat(selected_place['time'].replace("Z", "+00:00"))
            display_date = dt.strftime("%d.%m.%Y %H:%M")
        except:
            pass
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –º–µ—Å—Ç–µ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    message_text = await get_text(
        "confirm_booking", 
        lang, 
        place_name=selected_place['name'],
        address=selected_place.get('address', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'),
        date=display_date
    )
    
    # –ü–æ–ª—É—á–∞–µ–º match_id –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –≤ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è
    match_id = data.get('match_id')
    
    await call.message.edit_text(
        message_text, 
        reply_markup=confirm_keyboard(selected_place, lang, match_id),
        parse_mode="Markdown"
    )

async def confirm_booking(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    await call.answer("–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ‚Ä¶")
    telegram_id = str(call.from_user.id)
    lang = await get_user_language(telegram_id)
    
    # –†–∞–∑–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–ª–±—ç–∫–∞
    parts = call.data.split(":")
    # place_type, place_id –∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ match_id
    place_type = parts[2]
    place_id = parts[3]
    match_id = int(parts[4]) if len(parts) > 4 else None
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    selected_place = data.get('selected_place')
    city = data.get('city')
    date = data.get('date')
    
    if not selected_place:
        await call.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.")
        await state.finish()
        return
    
    # –°–æ–∑–¥–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ API
        async for session in get_session():
            user = await get_user_by_telegram_id(session, telegram_id)
            user_name = f"{user.first_name}" if user else f"User {telegram_id}"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–æ–¥ –≤ –¥–∞–Ω–Ω—ã–µ –º–µ—Å—Ç–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if 'city' not in selected_place:
                selected_place['city'] = city
                
            # –°–æ–∑–¥–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            new_res = await service.create_reservation(
                session, 
                user.id if user else int(telegram_id), 
                match_id, 
                selected_place,
                user_name
            )
            await session.commit()
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            display_date = date
            if "T" in selected_place['time']:
                try:
                    dt = datetime.fromisoformat(selected_place['time'].replace("Z", "+00:00"))
                    display_date = dt.strftime("%d.%m.%Y %H:%M")
                except:
                    pass
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            message_text = await get_text(
                "booking_confirmed", 
                lang, 
                place_name=selected_place['name'],
                address=selected_place.get('address', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'),
                date=display_date,
                reference=new_res.external_reference
            )
            
            await call.message.edit_text(message_text, parse_mode="Markdown")
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.finish()
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        await call.message.edit_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.finish()

async def my_bookings(call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–≤–æ–∏—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π"""
    await call.answer()
    telegram_id = str(call.from_user.id)
    lang = await get_user_language(telegram_id)
    
    try:
        async for session in get_session():
            user = await get_user_by_telegram_id(session, telegram_id)
            
            if not user:
                await call.message.edit_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            reservations = await service.get_user_reservations(session, user.id)
            
            if not reservations:
                message_text = await get_text("no_bookings", lang)
                await call.message.edit_text(message_text, parse_mode="Markdown")
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
            bookings_list = []
            for reservation, place in reservations:
                if reservation.status == "cancelled":
                    continue
                    
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                display_date = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                if reservation.reservation_time:
                    try:
                        dt = datetime.fromisoformat(str(reservation.reservation_time).replace("Z", "+00:00"))
                        display_date = dt.strftime("%d.%m.%Y %H:%M")
                    except:
                        pass
                
                booking_text = f"üè¢ *{place.name}*\n"
                booking_text += f"üìÖ {display_date}\n"
                booking_text += f"üîë `{reservation.external_reference}`\n"
                booking_text += f"üìç {place.city or '–ì–æ—Ä–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω'}\n\n"
                
                bookings_list.append(booking_text)
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_text = await get_text("my_bookings", lang, bookings_list="".join(bookings_list))
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            await call.message.edit_text(
                message_text, 
                reply_markup=my_bookings_keyboard(reservations, lang),
                parse_mode="Markdown"
            )
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {e}")
        await call.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.")

async def cancel_reservation(call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    await call.answer()
    telegram_id = str(call.from_user.id)
    lang = await get_user_language(telegram_id)
    
    # –ü–æ–ª—É—á–∞–µ–º ID –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –∫–æ–ª–±—ç–∫–∞
    _, _, reservation_id = call.data.split(":")
    
    try:
        async for session in get_session():
            user = await get_user_by_telegram_id(session, telegram_id)
            
            if not user:
                await call.message.edit_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            # –û—Ç–º–µ–Ω—è–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            cancelled = await service.cancel_reservation(session, int(reservation_id), user.id)
            await session.commit()
            
            if not cancelled:
                await call.message.edit_text("‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
                return
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
            await my_bookings(call)
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        await call.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.")

async def cancel_booking(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã –ø—Ä–æ—Ü–µ—Å—Å–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    await call.answer()
    telegram_id = str(call.from_user.id)
    lang = await get_user_language(telegram_id)
    
    message_text = await get_text("booking_cancelled", lang)
    await call.message.edit_text(message_text)
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()

async def back_to_menu(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    await call.answer()
    telegram_id = str(call.from_user.id)
    lang = await get_user_language(telegram_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    
    current_state = await state.get_state()
    
    if current_state == "BookingStates:viewing_places":
        # –ï—Å–ª–∏ –º—ã –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–ª–∏ –º–µ—Å—Ç–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã
        await BookingStates.choosing_date.set()
        
        place_type = data.get('place_type', 'venue')
        
        # –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∏–ø–æ–≤ –º–µ—Å—Ç
        place_type_names = {
            "ua": {"restaurant": "–†–µ—Å—Ç–æ—Ä–∞–Ω", "cafe": "–ö–∞—Ñ–µ", "bar": "–ë–∞—Ä", "cinema": "–ö—ñ–Ω–æ—Ç–µ–∞—Ç—Ä", "event": "–ü–æ–¥—ñ—è"},
            "ru": {"restaurant": "–†–µ—Å—Ç–æ—Ä–∞–Ω", "cafe": "–ö–∞—Ñ–µ", "bar": "–ë–∞—Ä", "cinema": "–ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä", "event": "–°–æ–±—ã—Ç–∏–µ"},
            "en": {"restaurant": "Restaurant", "cafe": "Cafe", "bar": "Bar", "cinema": "Cinema", "event": "Event"},
            "de": {"restaurant": "Restaurant", "cafe": "Caf√©", "bar": "Bar", "cinema": "Kino", "event": "Veranstaltung"}
        }
        
        place_type_localized = place_type_names.get(lang, place_type_names["en"]).get(place_type, place_type)
        
        message_text = await get_text("choose_date", lang, place_type=place_type_localized)
        await call.message.edit_text(message_text, reply_markup=date_keyboard(lang), parse_mode="Markdown")
        
    elif current_state == "BookingStates:confirming_booking":
        # –ï—Å–ª–∏ –º—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–ª–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –º–µ—Å—Ç
        await BookingStates.viewing_places.set()
        
        city = data.get('city', '')
        date = data.get('date', '')
        recommendations = data.get('recommendations', [])
        
        message_text = await get_text("select_place", lang, city=city, date=date)
        await call.message.edit_text(message_text, reply_markup=places_keyboard(recommendations, lang))
        
    else:
        # –í –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        await state.finish()
        
        message_text = await get_text("greeting", lang)
        await call.message.edit_text(message_text, reply_markup=booking_menu_keyboard(lang), parse_mode="Markdown")

def register_booking_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –º–µ–Ω—é –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    dp.register_message_handler(
        cmd_booking, 
        lambda m: any(word in m.text for word in ["üìÖ –ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è", "üìÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", "üìÖ Booking", "üìÖ Buchung"]),
        state="*"
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM
    dp.register_message_handler(process_city, state=BookingStates.choosing_city)
    dp.register_message_handler(process_custom_date, state=BookingStates.entering_custom_date)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–ª–±—ç–∫–æ–≤
    dp.register_callback_query_handler(process_place_type, lambda c: c.data.startswith("booking:type:"), state=BookingStates.choosing_place_type)
    dp.register_callback_query_handler(process_date, lambda c: c.data.startswith("booking:date:") or c.data == "booking:custom_date", state=BookingStates.choosing_date)
    dp.register_callback_query_handler(select_place, lambda c: c.data.startswith("booking:select:"), state=BookingStates.viewing_places)
    dp.register_callback_query_handler(confirm_booking, lambda c: c.data.startswith("booking:confirm:"), state=BookingStates.confirming_booking)
    
    # –°–ª—É–∂–µ–±–Ω—ã–µ –∫–æ–ª–±—ç–∫–∏
    dp.register_callback_query_handler(my_bookings, lambda c: c.data == "booking:my_bookings", state="*")
    dp.register_callback_query_handler(cancel_reservation, lambda c: c.data.startswith("booking:cancel_reservation:"), state="*")
    dp.register_callback_query_handler(cancel_booking, lambda c: c.data == "booking:cancel", state="*")
    dp.register_callback_query_handler(back_to_menu, lambda c: c.data == "booking:back", state="*")
